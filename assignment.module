<?php
// $Id$

// hook_help
function assignment_help($section) {
  $output = "";

  switch ($section) {
    case 'admin/modules#description':
      $output = t('A simple assignment node.');
      break;

    case 'node/add#assignment':
      $output = t('An assignment is a node that you wish to add to a gradebook.');
      break;
  }

  return $output;
}

// hook_node_info
function assignment_node_info() {
  return array('assignment' => array('name' => t('assignment'), 'base' => 'assignment'));
}

// hook_perm
function assignment_perm() {
  return array('create assignments', 'edit own assignments');
}

// hook_access
function assignment_access($op, $node) {
  global $user;
  switch($op) {
    case 'create':
      return user_access('create assignments');
      break;
    case 'update':
    case 'delete':
      if (user_access('edit own assignments') && ($user->uid == $node->uid)) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

// hook_menu
function assignment_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/assignment', 'title' => t('assignment'),
      'access' => user_access('create assignments'));
  }

  return $items;
}

// hook_settings
/*
function assignment_settings() {
  $form = array();
  
  return $form;
}
*/

// hook_form
function assignment_form(&$node) {
  // We need to define form elements for the node's title and body.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  // We want the body and filter elements to be adjacent. We could try doing
  // this by setting their weights, but another module might add elements to the
  // form with the same weights and end up between ours. By putting them into a
  // sub-array together, we're able force them to be rendered together.
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['body_filter']['filter'] = filter_form($node->format);
  
  // Get base form elements.
  $form = array_merge($form, gradebookapi_assignment_form_elements($node));
  
  return $form;
}

function assignment_validate(&$node) {
  gradebookapi_assignment_validate($node);
}

function assignment_submit(&$node) {
  //gradebookapi_assignment_submit($node);
}

function assignment_load($node) {
  return gradebookapi_assignment_load($node);
}

function assignment_insert($node) {
  gradebookapi_assignment_insert($node);
}

function assignment_update($node) {
  gradebookapi_assignment_update($node);
}

function assignment_delete($node) {
  gradebookapi_assignment_delete($node);
}

function assignment_form_submit() {
}

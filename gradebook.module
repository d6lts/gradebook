<?php

// hook_help
function gradebook_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('Provides a site-wide gradebook.');
  }
}

// hook_perm
function gradebook_perm() {
  return array('view gradebook', 'view own gradebook', 'edit gradebook');
}

// hook_menu
function gradebook_menu($may_cache) {
  $items = array();
  
  // The $may_cache parameter is used to divide menu items into two parts. Those
  // returned when $may_cache is true must be consistently applicable for the
  // current user at all times; the others may change or be defined at only
  // certain paths. Most modules will have excusively cacheable menu items.
  if ($may_cache) {
    $items[] = array(
      'path'     => 'gradebook',
      'title'    => t('gradebook'),
      'access'   => user_access('view gradebook')||user_access('view own gradebook'),
      'callback' => 'gradebook_page',
    );
  }
  elseif (is_numeric(arg(1)) || (variable_get('gradebook_show_default', 1))) {
    $gradebook = (is_numeric(arg(1))?arg(1):variable_get('gradebook_default_tid', 0));
    // make sure this is a root term
    if (_gradebook_is_root_term($gradebook)) {
      if (is_numeric(arg(1))) {
        $items[] = array(
          'path'               => _gradebook_base_url(),
          'title'              => t('view'),
          'type'               => MENU_CALLBACK,
          'callback'           => 'gradebook_gradebook_page',
          'callback arguments' => array($gradebook),
        );
      }
      $items[] = array(
        'path'               => _gradebook_base_url().'/view',
        'title'              => t('view'),
        'type'               => MENU_DEFAULT_LOCAL_TASK,
        'weight'             => -10,
      );
      $items[] = array(
        'path'               => _gradebook_base_url().'/rebuild',
        'title'              => t('rebuild'),
        'access'             => user_access('edit gradebook'),
        'callback'           => '_gradebook_rebuild_page',
        'callback arguments' => array($gradebook),
        'type'               => MENU_LOCAL_TASK,
      );
      $items[] = array(
        'path'               => _gradebook_base_url().'/category',
        'title'              => t('categories'),
        'access'             => user_access('edit gradebook'),
        'callback'           => 'gradebook_category_page',
        'callback arguments' => array($gradebook),
        'type'               => MENU_LOCAL_TASK,
      );
      $items[] = array(
        'path'               => _gradebook_base_url().'/category/list',
        'title'              => t('list'),
        'type'               => MENU_DEFAULT_LOCAL_TASK,
        'weight'             => -10,
      );
      $items[] = array(
        'path'               => _gradebook_base_url().'/category/add',
        'title'              => t('add category'),
        'access'             => user_access('edit gradebook'),
        'callback'           => 'gradebook_category_form',
        'callback arguments' => array($gradebook),
        'type'               => MENU_LOCAL_TASK,
      );
      
      if (is_numeric(arg(1))) {
        if ((arg(2)=='category') && (arg(3)=='edit') && is_numeric(arg(4))) {
          $tid = arg(4);
          $term = taxonomy_get_term($tid);
          $items[] = array(
            'path' => _gradebook_base_url().'/category/edit',
            'title' => t('edit category'),
            'callback' => 'gradebook_category_form',
            'callback arguments' => array($gradebook, (array)$term),
            'access' => user_access('edit gradebook'),
            'type' => MENU_CALLBACK,
          );
        }
        if ((arg(2)=='grade') && is_numeric(arg(3)) && is_numeric(arg(4))) {
          $uid = arg(3);
          $nid = arg(4);
          $grade = gradebook_get_grade($uid, $nid);
          $items[] = array(
            'path' => _gradebook_base_url().'/grade',
            'title' => t('edit grade'),
            'callback' => 'gradebook_grade_form',
            'callback arguments' => array($gradebook, (array)$grade),
            'access' => user_access('edit gradebook'),
            'type' => MENU_CALLBACK,
          );
        }
      }
      elseif (variable_get('gradebook_show_default', 1)) {
        if ((arg(1)=='category') && (arg(2)=='edit') && is_numeric(arg(3))) {
          $tid = arg(3);
          $term = taxonomy_get_term($tid);
          $items[] = array(
            'path' => _gradebook_base_url().'/category/edit',
            'title' => t('edit category'),
            'callback' => 'gradebook_category_form',
            'callback arguments' => array($gradebook, (array)$term),
            'access' => user_access('edit gradebook'),
            'type' => MENU_CALLBACK,
          );
        }
        if ((arg(1)=='grade') && is_numeric(arg(2)) && is_numeric(arg(3))) {
          $uid = arg(2);
          $nid = arg(3);
          $grade = gradebook_get_grade($uid, $nid);
          $items[] = array(
            'path' => _gradebook_base_url().'/grade',
            'title' => t('edit grade'),
            'callback' => 'gradebook_grade_form',
            'callback arguments' => array($gradebook, (array)$grade),
            'access' => user_access('edit gradebook'),
            'type' => MENU_CALLBACK,
          );
        }
      }
    }
  }
  return $items;
}

// hook_settings
// TODO: break out hard coded settings
function gradebook_settings() {
  $form = array();
  
  $roles = user_roles();
  unset($roles[DRUPAL_ANONYMOUS_RID]);
  
  $sel_roles = (array) variable_get('gradebook_student_rids', array());
  $default = array();
  foreach ($sel_roles as $rid => $value) {
    if ($value) {
      $default[] = $rid;
    }
  }
  $form['gradebook_student_rids'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Student roles'),
    '#default_value' => $default,
    '#options' => $roles,
    '#description' =>  t('Check at least one role.'),
    '#required' => TRUE,
  );
  
  $sel_roles = (array) variable_get('gradebook_teacher_rids', array());
  $default = array();
  foreach ($sel_roles as $rid => $value) {
    if ($value) {
      $default[] = $rid;
    }
  }
  $form['gradebook_teacher_rids'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Teacher roles'),
    '#default_value' => $default,
    '#options' => $roles,
    '#description' =>  t('Check at least one role.'),
    '#required' => TRUE,
  );
  
  $form['gradebook_show_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show default gradebook'),
    '#default_value' => variable_get('gradebook_show_default', 1),
    '#description' =>  t('Show the default gradebook or list gradebooks.'),
  );
  
  $form['gradebook_empty_grade'] = array(
    '#type' => 'textfield',
    '#title' => t('Empty grade'),
    '#default_value' => variable_get('gradebook_empty_grade', '--'),
    '#description' =>  t('This the text displayed when no grade has been entered.'),
    '#required' => TRUE,
  );
  
  return $form;
}

function gradebook_page($root = 0) {
  global $user;
  
  if (module_exist('taxonomy')) {
    $vid = _gradebook_get_vid();
    
    // show default gradebook or list?
    if (variable_get('gradebook_show_default', 1) && (!$root)) {
      $root = variable_get('gradebook_default_tid', 0);
    }
    
    // show a gradebook
    if ($root) {
      return gradebook_gradebook_page($root);
    }
    // show a list of gradebooks
    else {
      return gradebook_list($vid);
    }
  }
  else {
    drupal_set_message(t('The gradebook module requires the taxonomy module to be enabled and configured.'), 'error');
    return ' ';
  }
}

function gradebook_list($vid) {
  $terms = taxonomy_get_tree($vid, 0, -1, 1);
  
  $header = array();
  foreach ($terms as $term) {
    $rows[] = array(l($term->name, _gradebook_base_url().'/'.$term->tid));
  }
  
  return theme('table', $header, $rows);
}

function gradebook_gradebook_page($root) {
  // make sure we are root term
  if (!_gradebook_is_root_term($root)) {
    return drupal_access_denied();
  }

  $vid = _gradebook_get_vid();
  $tree = taxonomy_get_tree($vid, $root);
  
  $tids = array_map('_taxonomy_get_tid_from_term', $tree);
  $tids[] = $root; // add in base tid
  
  $nodes = array();
  $header = array('');
  $rows = array();
  
  // taxonomy_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC')
  $result = taxonomy_select_nodes($tids, 'or', 0, FALSE, 'n.created ASC');
  while ($node = db_fetch_object($result)) {
    $node = node_load($node->nid);
    $nodes[] = $node;
    $header[] = l($node->title, 'node/'.$node->nid) . '<br />' . $node->possible;
  }
  $header[] = ''; // total grade

  // TODO: how should we render categories?
  if (user_access('view gradebook')) {
    //$result = db_query("SELECT uid, name FROM {users} WHERE uid > 1 AND status != 0 ORDER BY name ASC");
    $str_rids = implode(',', array_keys(_gradebook_student_roles()));
    $result = db_query("SELECT u.uid, u.name FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE u.status != 0 AND r.rid IN (". $str_rids .") ORDER BY u.name ASC");
  }
  else {
    $result = db_query("SELECT uid, name FROM {users} WHERE uid=%d", $user->uid);
  }
  while ($account = db_fetch_object($result)) {
    $row = array();
    $row[] = theme('username', $account);
    foreach ($nodes as $node) {
      $grade = gradebook_get_grade($account->uid, $node->nid);
      if (user_access('edit gradebook')) {
        $row[] = l(($grade->earned?$grade->earned:variable_get('gradebook_empty_grade', '--')), _gradebook_base_url().'/grade/'.$account->uid.'/'.$node->nid);
      }
      else {
        $row[] = ($grade->earned?$grade->earned:variable_get('gradebook_empty_grade', '--'));
      }
    }
    $grade = _gradebook_get_term_grade($account->uid, $root);
    $row[] = $grade->earned . '/' . $grade->possible;
    $rows[] = $row;
  }
  
  return theme('table', $header, $rows);
}

function gradebook_category_page($root) {
  // make sure we are root term
  if (!_gradebook_is_root_term($root)) {
    return drupal_access_denied();
  }
  
  // TODO: code borrowed from forum.module
  //       needs serious cleanup
  $vid = _gradebook_get_vid();
  $destination = drupal_get_destination();

  $header = array(t('Name'), t('Operations'));
  $vocabulary = taxonomy_get_vocabulary($vid);

  drupal_set_title(check_plain($vocabulary->name));
  $start_from      = $_GET['page'] ? $_GET['page'] : 0;
  $total_entries   = 0;  // total count for pager
  $page_increment  = 25; // number of tids per page
  $displayed_count = 0;  // number of tids shown

  $tree = taxonomy_get_tree($vocabulary->vid, $root);
  foreach ($tree as $term) {
    $total_entries++; // we're counting all-totals, not displayed
    if (($start_from && ($start_from * $page_increment) >= $total_entries) || ($displayed_count == $page_increment)) { continue; }
    $rows[] = array(_taxonomy_depth($term->depth) . ' ' . l($term->name, _gradebook_base_url()."/category/edit/$term->tid"), l(t('edit'), _gradebook_base_url()."/category/edit/$term->tid", array(), $destination));
    $displayed_count++; // we're counting tids displayed
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No categories available.'), 'colspan' => '2'));
  }

  $GLOBALS['pager_page_array'][] = $start_from;  // FIXME
  $GLOBALS['pager_total'][] = intval($total_entries / $page_increment) + 1; // FIXME

  if ($total_entries >= $page_increment) {
    $rows[] = array(array('data' => theme('pager', NULL, $page_increment), 'colspan' => '2'));
  }

  return theme('table', $header, $rows, array('id' => 'taxonomy'));
}

function gradebook_category_form($root, $edit = array()) {
  // make sure we are root term
  if (!_gradebook_is_root_term($root)) {
    return drupal_access_denied();
  }

  // Handle a delete operation.
  if ($_POST['op'] == t('Delete') || $_POST['edit']['confirm']) {
    return _gradebook_confirm_delete($edit['tid']);
  }
  
  $form['name'] = array(
    '#title' => t('Category name'),
    '#type' => 'textfield',
    '#default_value' => $edit['name'],
    '#maxlength' =>  64,
    '#description' => t('The category name is used to identify related assignments.'),
    '#required' => TRUE
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $edit['description'],
    '#description' => t('The category description can give users more information about the assignments it contains.')
  );
  $form['parent']['#tree'] = TRUE;
  $form['parent'][0] = _gradebook_parent_select($root, $edit['tid'], t('Parent'));
  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $edit['weight'],
    '#description' => t('When listing categories, those with with light (small) weights get listed before containers with heavier (larger) weights. Categories with equal weights are sorted alphabetically.')
  );
  
  $form['vid'] = array(
    '#type' => 'hidden',
    '#value' => _gradebook_get_vid(),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  if ($edit['tid']) {
    $form['tid'] = array(
      '#type' => 'hidden',
      '#value' => $edit['tid'],
    );
    $parents = taxonomy_get_parents($edit['tid']);
    if ($parents) {
      $parent = array_shift($parents);
      $form['parent_old'] = array(
        '#type' => 'hidden',
        '#value' => $parent->tid,
      );
    }
  
    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));
  }

  return drupal_get_form('gradebook_category_form', $form, 'gradebook_form');
}

function gradebook_category_form_submit($form_id, $form_values) {
  $status = taxonomy_save_term($form_values);
  switch ($status) {
    case SAVED_NEW:
      drupal_set_message(t('Created new %type %term.', array('%term' => theme('placeholder', $form_values['name']), '%type' => t('category'))));
      break;
    case SAVED_UPDATED:
      if ($form_values['parent_old'] != $form_values['parent'][0]) {
        _gradebook_calc_grades_all_users($form_values['parent_old']);
        _gradebook_calc_grades_all_users($form_values['parent'][0]);
      }
      drupal_set_message(t('The %type %term has been updated.', array('%term' => theme('placeholder', $form_values['name']), '%type' => t('category'))));
      break;
  }
  return _gradebook_base_url().'/category'; 
}

function gradebook_grade_form($root, $edit = array()) {
  // make sure we are root term
  if (!_gradebook_is_root_term($root)) {
    return drupal_access_denied();
  }
  
  $account = user_load(array('uid' => $edit['uid']));
  $node = node_load($edit['nid']);

  // TODO: cleanup grade form rendering
  //       ideally edit is in-place in gradebook using AJAX
  $form['user'] = array(
    '#value' => 'Student: ' . $account->name . "<br />\n",
  );
  
  $form['node'] = array(
    '#value' => 'Assignment: ' . $node->title . "<br />\n",
  );
  
  $form['possible'] = array(
    '#value' => 'Possible: ' . $node->possible . "<br />\n",
  );

  $form['overage'] = array(
    '#value' => 'Overage: ' . ($node->overage?'Yes':'No') . "<br />\n",
  );
  
  $form['earned'] = array(
    '#title' => t('Earned'),
    '#type' => 'textfield',
    '#default_value' => $edit['earned'],
    '#maxlength' =>  64,
    '#description' => t('The grade earned.'),
    '#required' => TRUE
  );

  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $edit['uid'],
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $edit['nid'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return drupal_get_form('gradebook_grade_form', $form, 'gradebook_form');
}

function gradebook_grade_form_validate($form_id, $form_values) {
  $account = user_load(array('uid' => $form_values['uid']));
  $node = node_load($form_values['nid']);
  
  if (!$account || !$node) {
    form_set_error('', t('The UID/NID has an error.'));
  }

  if (!$node->overage) {
    if ($form_values['earned'] > $node->possible) {
      form_set_error('earned', t('You can not enter a value over the possible value for this assignment.'));
    }
  }
}

function gradebook_grade_form_submit($form_id, $form_values) {
  gradebook_set_grade((object)$form_values);
  drupal_set_message(t('Saved %type.', array('%type' => t('grade'))));
  return _gradebook_base_url(); 
}

// hook_taxonomy
function gradebook_taxonomy($op, $type, $obj = NULL) {
  if ($obj['vid'] == _gradebook_get_vid()) {
    switch ($op) {
      case 'form':
        switch ($type) {
          case 'term':
            // save old parent so we don't have to clear the entire grade cache
            if ($obj['parent']) {
              $obj['parent_old'] = $obj['parent'];
            }
            break;
        }
        break;
      case 'insert':
      case 'update':
        switch ($type) {
          case 'term':
            // update grade cache
            //if ($obj['parent_old'] && ($obj['parent_old'] != $obj['parent'])) {
              // update old parent, but exclude 'tid' as hierarchy is not updated yet
              //_gradebook_calc_grades_all_users($obj['parent_old'], array('tid'=>array($obj['tid'])));
            //}
            //_gradebook_calc_grades_all_users($obj['tid']);
            
            // at this point, the term has been saved, but the hierarchy table has not been updated
            // delete the term grades from cache and force cleaning up OLD tree branch
            //_gradebook_clear_term_grades($obj['tid']);
            // update new parent, forcing inclusion of 'tid'
            //_gradebook_calc_grades_all_users($obj['tid'], array('parents'=>arra($obj['parent'])), array('parents'=>array($obj['parent_old'])));
            
            // recalc old parent, excluding current 'tid'
            //if ($obj['parent_old']) {
            //  _gradebook_calc_grades_all_users($obj['parent_old'], array('children'=>array($obj['tid'])));
            //}
            // recalc new parent, including current 'tid' and excluding old parent
            //_gradebook_calc_grades_all_users($obj['parent'][0], array('parents'=>array($obj['parent_old'])), array('children'=>array($obj['tid'])));
            break;
        }
        break;
      case 'delete':
        switch ($type) {
          case 'term':
            // TODO: by the time we get here, the hierarchy has already been cleaned.
            //       how do we tell the parent to recalc?
            _gradebook_clear_term_grades($obj['tid']);
            // TODO: delete nodes associated with this term and it's children
            break;
          case 'vocabulary':
            variable_del('gradebook_nav_vocabulary');
            variable_del('gradebook_default_tid');
            break;
        }
        break;
    }
  }
}

// hook_form_alter
/*
function gradebook_form_alter($form_id, &$form) {
  // hide critical options from forum vocabulary
  if ($form_id == 'taxonomy_form_vocabulary') {
    if ($form['vid']['#value'] == _forum_get_vid()) {
      $form['help_forum_vocab'] = array(
        '#value' => t('This is the designated forum vocabulary. Some of the normal vocabulary options have been removed.'),
        '#weight' => -1,
      );
      $form['nodes']['forum'] = array('#type' => 'checkbox', '#value' => 1, '#title' => t('forum topic'), '#attributes' => array('disabled' => '' ), '#description' => t('forum topic is affixed to the forum vocabulary.'));
      $form['hierarchy'] = array('#type' => 'value', '#value' => 1);
      unset($form['relations']);
      unset($form['tags']);
      unset($form['multiple']);
      $form['required'] = array('#type' => 'value', '#value' => 1);
    }
    else {
      unset($form['nodes']['forum']);
    }
  }
}
*/

function gradebook_assignment_form_elements($node) {
  $form = array();
  
  $form['possible'] = array(
    '#type' => 'textfield',
    '#title' => t('Possible'),
    '#default_value' => ($node->possible?$node->possible:'0'),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
  );
  
  $form['overage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Overage'),
    '#default_value' => ($node->overage?$node->overage:'0'),
  );
  
  return $form;
}

function gradebook_assignment_validate(&$node) {
  if (!is_numeric($node->possible) || ($node->possible < 0)) {
    form_set_error('possible', t('The possible value for the assignment must be a positive integer.')); 
  }
}

function gradebook_assignment_submit(&$node) {
  // TODO: anything to do here?
}

function gradebook_assignment_load($node) {
  $additions = db_fetch_object(db_query('SELECT possible, overage FROM {gradebook_assignment} WHERE nid = %d', $node->nid));
  return $additions;
} 

function gradebook_assignment_insert($node) {
  db_query("INSERT INTO {gradebook_assignment} (nid, possible, overage) VALUES (%d, %d, %d)", $node->nid, $node->possible, $node->overage);
  
  // we have to manually update terms as we can't control module order
  taxonomy_node_save($node->nid, $node->taxonomy);
  
  $terms = taxonomy_node_get_terms_by_vocabulary($node->nid, _gradebook_get_vid());
  foreach ($terms as $term) {
    _gradebook_calc_grades_all_users($term->tid);
  }
}

function gradebook_assignment_update($node) {
  db_query("UPDATE {gradebook_assignment} SET possible = '%s', overage = %d WHERE nid = %d", $node->possible, $node->overage, $node->nid);
  
  // we have to manually update terms as we can't control module order
  taxonomy_node_save($node->nid, $node->taxonomy);
  
  $terms = taxonomy_node_get_terms_by_vocabulary($node->nid, _gradebook_get_vid());
  foreach ($terms as $term) {
    _gradebook_calc_grades_all_users($term->tid);
  }
}

function gradebook_assignment_delete($node) {
  db_query('DELETE FROM {gradebook_assignment} WHERE nid = %d', $node->nid);

  $terms = taxonomy_node_get_terms_by_vocabulary($node->nid, _gradebook_get_vid());
  foreach ($terms as $term) {
    _gradebook_calc_grades_all_users($term->tid);
  }
}

function gradebook_get_grade($uid, $nid) {
  // try to get grade data
  $result = db_query(
    'SELECT g.earned, g.timestamp '.
    'FROM {gradebook_grade} g '.
    'WHERE g.uid=%d AND g.nid=%d', $uid, $nid);
  $grade = db_fetch_object($result);
  
  // add 'possible' grade
  $result = db_query(
    'SELECT a.possible '.
    'FROM {gradebook_assignment} a '.
    'WHERE a.nid=%d', $nid);
  if ($assignment = db_fetch_object($result)) {
    $grade->possible = $assignment->possible;
  }
  
  // add uid/nid
  $grade->uid = $uid;
  $grade->nid = $nid;
  
  return $grade;
}

function gradebook_set_grade($grade) {
  $old = gradebook_get_grade($grade->uid, $grade->nid);
  $grade->timestamp = time();
  if ($old->timestamp) {
    db_query('UPDATE {gradebook_grade} SET earned=%d, timestamp=%d WHERE uid=%d AND nid=%d', $grade->earned, $grade->timestamp, $grade->uid, $grade->nid);
  }
  else {
    db_query("INSERT INTO {gradebook_grade} (uid, nid, earned, timestamp) VALUES (%d, %d, %d, %d)", $grade->uid, $grade->nid, $grade->earned, $grade->timestamp); 
  }
  
  $terms = taxonomy_node_get_terms_by_vocabulary($grade->nid, _gradebook_get_vid());
  foreach ($terms as $term) {
    _gradebook_calc_grades($grade->uid, $term->tid);
  }
}

function _gradebook_get_vid() {
  $vid = variable_get('gradebook_nav_vocabulary', '');
  if (empty($vid)) {
    // Check to see if a forum vocabulary exists
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", 'gradebook'));
    if (!$vid) {
      $edit = array(
        'name' => 'Gradebook',
        'multiple' => 0,
        'required' => 1,
        'hierarchy' => 1,
        'relations' => 0,
        'module' => 'gradebook',
        'nodes' => array('assignment' => 1)
      );
      taxonomy_save_vocabulary($edit);
      $vid = $edit['vid'];
      
      $edit = array(
        'name' => 'default',
        'description' => '',
        'vid' => $vid,
        'weight' => 0
      );
      taxonomy_save_term($edit);
      variable_set('gradebook_default_tid', $edit['tid']);
    }
    variable_set('gradebook_nav_vocabulary', $vid);
  }

  return $vid;
}

function _gradebook_parent_select($root, $tid, $title) {
  $parents = taxonomy_get_parents($tid);
  if ($parents) {
    $parent = array_shift($parents);
    $parent = $parent->tid;
  }
  else {
    $parent = $root;
  }

  $children = taxonomy_get_tree(_gradebook_get_vid(), $tid);

  // A term can't be the child of itself, nor of its children.
  foreach ($children as $child) {
    $exclude[] = $child->tid;
  }
  $exclude[] = $tid;

  $tree = taxonomy_get_tree(_gradebook_get_vid(), $root);
  $options[$root] = '<'. t('root') .'>';
  if ($tree) {
    foreach ($tree as $term) {
      if (!in_array($term->tid, $exclude)) {
        $options[$term->tid] = _taxonomy_depth($term->depth) . $term->name;
      }
    }
  }

  return array('#type' => 'select', '#title' => $title, '#default_value' => $parent, '#options' => $options, '#description' => $description, '#required' => TRUE);
}

function _gradebook_category_confirm_delete($tid) {
  $term = taxonomy_get_term($tid);

  $form['tid'] = array('#type' => 'value', '#value' => $tid);
  $form['name'] = array('#type' => 'value', '#value' => $term->name);

  return confirm_form('gradebook_category_confirm_delete', $form, t('Are you sure you want to delete the forum %name?', array('%name' => theme('placeholder', $term->name))), 'admin/forums', t('Deleting a forum or container will delete all sub-forums and associated posts as well. This action cannot be undone.'), t('Delete'), t('Cancel'));
}

function gradebook_category_confirm_delete_submit($form_id, $form_values) {
  taxonomy_del_term($form_values['tid']);
  drupal_set_message(t('The category %term and all sub-categories and associated assignments have been deleted.', array('%term' => theme('placeholder', $form_values['name']))));
  watchdog('content', t('gradebook: deleted %term and all its sub-categories and associated posts.', array('%term' => theme('placeholder', $form_values['name']))));

  return 'admin/forum';
}

function _gradebook_student_roles() {
  $roles = user_roles();
  unset($roles[DRUPAL_ANONYMOUS_RID]);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  
  $sel_roles = (array) variable_get('gradebook_student_rids', array());
  foreach ($sel_roles as $rid => $value) {
    if (!$value) {
      unset($roles[$rid]);
    }
  }
  
  return $roles;
}

function _gradebook_teacher_roles() {
  $roles = user_roles();
  unset($roles[DRUPAL_ANONYMOUS_RID]);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  
  $sel_roles = (array) variable_get('gradebook_teacher_rids', array());
  foreach ($sel_roles as $rid => $value) {
    if (!$value) {
      unset($roles[$rid]);
    }
  }
  
  return $roles;
}

function _gradebook_calc_grades($uid, $tid, $recursive=TRUE) {
  $earned = 0;
  $possible = 0;
  
  //watchdog('gradebook', "_gradebook_calc_grades($uid, $tid, $recursive)");
  //print_r(debug_backtrace());
  
  // if UID is < 1, calc grades for ALL users
  if ($uid<=0) {
    return _gradebook_calc_grades_all_users($tid);
  }
  
  // clear cache
  db_query("DELETE FROM {gradebook_cache} WHERE tid=%d AND uid=%d", $tid, $uid); 
  
  // get grades from child terms
  $children = taxonomy_get_children($tid, _gradebook_get_vid());
  foreach ($children as $child) {
    $grade = _gradebook_get_term_grade($uid, $child->tid);
    if ($grade) {
      $earned += $grade->earned;
      $possible += $grade->possible;
    }
  }
  
  // get grades from nodes at this term
  $result = taxonomy_select_nodes(array($tid), 'or', 0, FALSE);
  while ($node = db_fetch_object($result)) {
    $grade = gradebook_get_grade($uid, $node->nid);
    if ($grade) {
      $earned += $grade->earned;
      $possible += $grade->possible;
    }
  }
  
  // cache grade
  db_query("INSERT INTO {gradebook_cache} (uid, tid, earned, possible) VALUES (%d, %d, %d, %d)", $uid, $tid, $earned, $possible);
  
  if ($recursive) {
    // recalc parents
    $parents = taxonomy_get_parents($tid);
    foreach ($parents as $parent) {
      _gradebook_calc_grades($uid, $parent->tid, $recursive);
    }
  }
}

function _gradebook_calc_grades_all_users($tid, $recursive=TRUE) {
  $str_rids = implode(',', array_keys(_gradebook_student_roles()));
  $result = db_query("SELECT u.uid, u.name FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE u.status != 0 AND r.rid IN (". $str_rids .") ORDER BY u.name ASC");
  while ($account = db_fetch_object($result)) {
    _gradebook_calc_grades($account->uid, $tid, $recursive);
  }
}

function _gradebook_get_term_grade($uid, $tid) {
  $result = db_query("SELECT earned, possible FROM {gradebook_cache} WHERE tid=%d AND uid=%d", $tid, $uid);
  $grade = db_fetch_object($result);
  return $grade;
}

function _gradebook_clear_term_grades($tid, $recursive=TRUE, $start=TRUE) {
  db_query("DELETE FROM {gradebook_cache} WHERE tid=%d", $tid);
  // do a recursive delete?
  if ($recursive) {
    $children = taxonomy_get_children($tid, _gradebook_get_vid());
    foreach ($children as $child) {
      _gradebook_clear_term_grades($child->tid, $recursive, FALSE);
    }
  }
  // tell parents to recalc cache
  if ($start) {
    $parents = taxonomy_get_parents($tid);
    foreach ($parents as $parent) {
      _gradebook_calc_grades_all_users($parent->tid);
    }
  }
}

function _gradebook_rebuild_page($tid) {
  _gradebook_rebuild_grades($tid);
  drupal_goto(_gradebook_base_url());
}

function _gradebook_rebuild_grades($tid) {
  $children = taxonomy_get_children($tid, _gradebook_get_vid());
  if ($children) {
    foreach ($children as $child) {
      _gradebook_rebuild_grades($child->tid);
    }
  }
  else {
    _gradebook_calc_grades_all_users($tid);
  }
}

function _gradebook_base_url() {
  if (is_numeric(arg(1))) {
    return 'gradebook/'.arg(1);
  }
  else {
    return 'gradebook';
  }
}

function _gradebook_is_root_term($tid) {
  $parents = taxonomy_get_parents($tid);
  foreach ($parents as $parent) {
    return FALSE;
  }
  return TRUE;
}

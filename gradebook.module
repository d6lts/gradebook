<?php
// $Id$
/**
 * @file
 * Provides a simple gradebook
 */

/**
 * Implementation of hook_perm().
 */
function gradebook_perm() {
  return array('admin gradebook', 'access gradebook');
}

/**
 * Implementation of hook_theme().
 */
function gradebook_theme() {
  return array(
    'gradebook_page'  => array('arguments' => array('gradebook', 'assignments', 'student_grades')),
    'gradebook_table' => array('arguments' => array('headers', 'rows', 'attributes', 'caption')),
    'gradebook_assignment_grade' => array('arguments' => array('gradebook', 'grade')),
    'gradebook_term_grade' => array('arguments' => array('gradebook', 'grade')),
    'gradebook_assignment_note' => array('arguments' => array('tid', 'account', 'node', 'grade')),
  );
}


/**
 * hook_term_path from taxonomy module
 *
 * @param $term
 *   A term object.
 * @return
 *   An internal Drupal path.
 */

function gradebook_term_path($term) {
  $gradebook = gradebookapi_get_tid_gradebook($term->tid);
  return 'gradebook/'. $gradebook->tid;
}

/**
 * Implementation of hook_menu().
 */
function gradebook_menu() {
  $items = array();
  $items['gradebook'] = array(
    'title' => 'Gradebooks',
    'page callback'    => 'gradebook_list_page',
    'access callback'  => 'user_access',
    'access arguments' => array('access gradebook'),
    'type'             => MENU_SUGGESTED_ITEM,
  );

  // admin menu
  $items['admin/gradebook/gradebook'] = array(
    'title'            => 'Gradebooks',
    'description'      => 'Control gradebooks and change gradebook settings.',
    'page callback'    => 'gradebook_admin_list_page',
    'access callback'  => 'user_access',
    'access arguments' => array('administer gradebook'),
    'file'             => 'gradebook.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/gradebook/gradebook/list'] = array(
    'title'            => 'List',
    'access callback'  => 'user_access',
    'access arguments' => array('administer gradebook'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );

  $items['admin/gradebook/gradebook/add'] = array(
    'title'            => 'Add gradebook',
    'page callback'    => 'gradebook_add_page',
    'access callback'  => 'user_access',
    'access arguments' => array('administer gradebook'),
    'file'             => 'gradebook.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );
  $items['admin/gradebook/gradebook/edit'] = array(
    'title'            => 'Edit gradebook',
    'page callback'    => 'gradebook_edit_page',
    'access callback'  => 'user_access',
    'access arguments' => array('administer gradebook'),
    'file'             => 'gradebook.admin.inc',
    'type'             => MENU_CALLBACK,
  );
  $items['admin/gradebook/gradebook/settings'] = array(
    'title'            => 'Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('gradebook_admin_settings'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer gradebook'),
    'file'             => 'gradebook.admin.inc',
    'weight'           => 5,
    'type'             => MENU_LOCAL_TASK,
  );

  $items['gradebook/%gradebookapi_gradebook'] = array(
    'title'              => 'Gradebook Name',
    'title callback'     => 'gradebook_get_gradebook_name',
    'title arguments'    => array(1),
    'page callback'      => 'gradebook_gradebook_page',
    'page arguments'     => array(1, 2),              // optional path element specifies user id
    'access callback'    => 'user_access',
    'access arguments'   => array('access gradebook'),
    'type'               => MENU_LOCAL_TASK,
  );

  $items['gradebook/%gradebookapi_gradebook/view'] = array(
    'title'              => 'view',
    'type'               => MENU_DEFAULT_LOCAL_TASK,
    'weight'             => -10,
  );

  $items['gradebook/%gradebookapi_gradebook/catlist'] = array(
    'title'              => 'list categories',
    'page callback'      => 'gradebook_category_page',
    'page arguments'     => array(1),
    'access callback'    => 'gradebookapi_is_teacher',
    'access arguments'   => array(1),
    'type'               => MENU_LOCAL_TASK,
    'weight'             => 0,
    'file'               => 'gradebook.category.inc',
  );

  $items['gradebook/%gradebookapi_gradebook/catadd'] = array(
    'title'              => 'add category',
    'page callback'      => 'gradebook_category_add_page',
    'page arguments'     => array(1),
    'access callback'    => 'gradebookapi_is_teacher',
    'access arguments'   => array(1),
    'type'               => MENU_LOCAL_TASK,
    'weight'             => 1,
    'file'               => 'gradebook.category.inc',
  );

  $items['gradebook/%gradebookapi_gradebook/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gradebook_download_form', 1),
    'access callback' => 'gradebookapi_is_teacher',
    'access arguments' => array(1),
    'file' => 'gradebook_report.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  $items['gradebook/%gradebookapi_gradebook/catedit/%'] = array(
    'title'              => 'edit category',
    'page callback'      => 'gradebook_category_edit_page',
    'page arguments'     => array(1, 3),
    'access callback'    => 'gradebookapi_is_teacher',
    'access arguments'   => array(1),
    'type'               => MENU_CALLBACK,
    'weight'             => 3,
    'file'               => 'gradebook.category.inc',
  );

  $items['gradebook/%gradebookapi_gradebook/grade/%/%'] = array(  // 3 is uid, 4 is nid
    'title'              => 'edit grade',
    'title callback'     => 'gradebook_edit_or_summary',
    'title arguments'    => array(1),
    'page callback'      => 'gradebook_grade_page',
    'page arguments'     => array(1, 3, 4),
    'access callback'    => 'gradebookapi_is_student_or_teacher',
    'access arguments'   => array(1),
    'type'               => MENU_CALLBACK,
    'weight'             => 2,
    'file'               => 'gradebook.pages.inc',
  );

// Entering grade by assignment, rather than individually
  $items['gradebook/%gradebookapi_gradebook/grade-assignment/%'] = array(
    'title'              => 'Enter Assignment Grades',
    'page callback'      => 'gradebook_grade_assignment_page',
    'page arguments'     => array(1, 3),
    'access callback'    => 'gradebookapi_is_teacher',
    'access arguments'   => array(1),
    'type'               => MENU_CALLBACK,
    'weight'             => 2,
    'file'               => 'gradebook.pages.inc',
  );

// Entering all grades for user, rather than individually
  $items['gradebook/%gradebookapi_gradebook/edit-all/%'] = array(
    'title'              => 'Enter Assignment Grades',
    'page callback'      => 'gradebook_grade_student_page',
    'page arguments'     => array(1, 3),
    'access callback'    => 'gradebookapi_is_teacher',
    'access arguments'   => array(1),
    'type'               => MENU_CALLBACK,
    'weight'             => 2,
    'file'               => 'gradebook.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 *
 */
function gradebook_init() {
  // Add the CSS for this module
  drupal_add_css(drupal_get_path('module', 'gradebook') .'/gradebook.css');
}

/**
 * Implementation of hook_help().
 */
function gradebook_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gradebook':
      $output = '<p>'. t('The gradebook module provides a simple gradebook for Drupal. Gradebooks and their sub-categories are based on a taxonomy vocabulary structure. Grades are tabulated and presented on gradebook pages such that teachers can see all the students in the gradebook, but students can only access their own grades.') .'</p>';
      $output .= '<p>'. t('Gradebook administrators can add one or more gradebooks for teachers and students to use. Everyone can access these from the <a href="@gradebook">Gradebook Navigation menu item</a>.', array('@gradebook' => url('gradebook'))) .'</p>';
      $output .= '<p>'. t('Gradebook administrators select the assignment content types from the <a href="@api-admin">Gradebook API administration page</a>. This gives the content create forms for these types a couple additional fields to select the gradebook and possible points for each individual assignment.', array('@api-admin' => url('admin/gradebook/gradebookapi'))) .'</p>';
      $output .= '<p>'. t('The administrator also assigns the site-wide roles for Students and Teachers at the <a href="@settings">Gradebook Settings page</a>.', array('@settings' => url('admin/gradebook/gradebook/settings'))) .'</p>';
      $output .= '<p>'. t('Teachers can create assignment sub-categories for the gradebook - such as Quizes, Tests, Homework, etc. - create assignments, and enter and view student grades. Teachers can also leave notes for students, commenting on their assignment. All of this is done from the individual gradebook pages.') .'</p>';
      return $output;
    case 'admin/gradebook/gradebook':
      $output = '<p>'. t('All of the available gradebooks are listed below. Click on the name of the gradebook to view assignments and student grades for that gradebook. Click on <em>edit</em> To change the name of the gradebook or its location in the list. You can assign the user roles for teachers and students and configure other gradebook settings by clicking on the <em>settings</em> tab. Add additional gradebooks by clicking on the <em>add gradebook</em> tab.') .'</p>';
      return $output;
    case 'admin/gradebook/gradebook/settings':
      $output = '<p>'. t('Select the roles corresponding to students and teachers. Students are only allowed to see their own grade. Teachers can view and assign grades for all students. Note that teachers should probably also be allowed to create assignments. (Use the <a href="@assignment">Gradebook API Configuration</a> to select assignment content types, and grant <a href="@permission">User Permissions</a> to create, edit, and delete content for the teacher roles you select)', array('@assignment' => url('admin/gradebook/gradebookapi'), '@permission' => url('admin/user/permissions'))) .'</p>';
      $output .= '<p>'. t('The general gradebook settings affect the presentation of the gradebooks.') .'</p>';
      return $output;
    case 'gradebook':
      $output = '<p>'. t('All of the available gradebooks are listed below. Click on the name of the gradebook to view assignments and student grades within that gradebook. Teachers can also assign grades and configure the assignment categories for the gradebook.') .'</p>';
      return $output;
    case 'gradebook/%':
      $gradebook = gradebookapi_gradebook_load($arg[1]);
      $output = '';
      if (isset($gradebook)) {
        $output = '<p>'. t('<strong>%gradebook_name:</strong> This gradebook can be sorted by clicking on any of the links in the first column. Click on the grade for an assignment', array('%gradebook_name' => $gradebook->name));
        $output .= gradebookapi_is_teacher($gradebook) ? t(' to assign, edit or view the ') : t('to view your');
        $output .= t('grade. Click on the title of an assignment to read the assignment.') .'</p>';
      }
      return $output;
    case 'gradebook/%/catlist':
      $gradebook = gradebookapi_gradebook_load($arg[1]);
      $output = '';
      if (isset($gradebook)) {
        $output = '<p>'. t('<strong>%gradebook_name:</strong> Gradebook categories are a way of organizing the gradebook by assignment type. <em>Tests</em>, <em>Quizzes</em>, <em>Book Reports</em>, are all possible examples. Gradebook categories can also be parents of sub-categories. Click <em>add categories</em> to add a category to this gradebook, or <em>edit</em> to edit a category thats already been created. The gradebook will automatically be updated to reflect any changes to gradebook categories.', array('%gradebook_name' => $gradebook->name)) .'</p>';
      }
      return $output;
  }
}

/**
 * hook_gradebookapi_students
 *
 * @param $gradebook
 *   The gradebook object
 * @return array
 *   An array of student user ids
 */

function gradebook_gradebookapi_students($gradebook) {
  return _gradebook_gradebookapi_role($gradebook, 'student');
}

/**
 * hook_gradebookapi_teachers
 *
 * @param $gradebook
 *   The gradebook object
 * @return array
 *   An array of teacher user ids
 */

function gradebook_gradebookapi_teachers($gradebook) {
  return _gradebook_gradebookapi_role($gradebook, 'teacher');
}

/**
 * Helper function for hook_gradebookapi_teachers and hook_gradebokapi_students
 * to avoid code duplication.
 * @param $gradebook
 *   The gradebook object
 * @param $role_name
 *   Role name to get user ids for, must be either 'student' or 'teacher'
 * @return array
 *   An array of teacher user ids
 */

function _gradebook_gradebookapi_role($gradebook, $role_name) {
  $role = array();

  if ( $role_name == 'teacher' || $role_name == 'student' ) {
    $var = 'gradebook_'. $role_name .'_rids';
    $sel_roles = array_filter((array)variable_get($var, array()));
    if (count($sel_roles)) {
      if ($str_rids = implode(',', $sel_roles)) {
        $result = db_query("SELECT u.uid FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE u.status <> 0 AND r.rid IN (". $str_rids .")");
        while ($user = db_fetch_object($result)) {
          $role[$user->uid] = $user->uid;
        }
      }
    }
  }
  return $role;
}

/**
 * Title callback to return gradebook name
 *
 * @param $gradebook
 *   The gradebook object
 *
 */

function gradebook_get_gradebook_name($gradebook) {
  return $gradebook->name;
}

/**
 * Title callback returns title based on role
 *
 * @param $gradebook
 *   The gradebook object
 */

function gradebook_edit_or_summary($gradebook) {
  if (gradebookapi_is_teacher($gradebook)) {
    return t('Edit Grade');
  }
  else {
    return  t('Assignment Summary');
  }
}

/**
 * Menu callback; prints a forum listing.
 *
 * TODO: filter list to show only appropriate gradebooks
 */
function gradebook_list_page() {
  $vid = gradebookapi_get_vid();

  $header = array(
    array('data' => t('Name'), 'field' => 't.name', 'sort' => 'asc'),
  );

  $sql  = 'SELECT DISTINCT t.tid, t.name FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE h.parent = 0 AND t.vid = '. $vid;
  $sql .= tablesort_sql($header, 'weight, ');
  $result = pager_query($sql, variable_get('gradebooks_per_page', 25));
  while ($term = db_fetch_object($result)) {
    $rows[] = array('name' => l($term->name, 'gradebook/'. $term->tid));
  }

  $output = theme('table', $header, $rows);
  $output .= theme('pager');

  return $output;
}

function _gradebook_parent_select($root, $tid, $title) {
  $parents = taxonomy_get_parents($tid);
  if (!empty($parents)) {
    $parent = array_shift($parents);
    $parent = $parent->tid;
  }
  else {
    $parent = $root;
  }

  $children = taxonomy_get_tree(gradebookapi_get_vid(), $tid);

  // A term can't be the child of itself, nor of its children.
  foreach ($children as $child) {
    $exclude[] = $child->tid;
  }
  $exclude[] = $tid;

  $tree = taxonomy_get_tree(gradebookapi_get_vid(), $root);
  $options[$root] = '<'. t('root') .'>';
  if (!empty($tree)) {
    foreach ($tree as $term) {
      if (!in_array($term->tid, $exclude)) {
        $options[$term->tid] = str_repeat('--', $term->depth) . $term->name;
      }
    }
  }

  return array('#type' => 'select', '#title' => $title, '#default_value' => $parent, '#options' => $options, '#description' => "If this is a sub-category, select the parent category. Otherwise select <strong>root</strong> for a top level category.", '#required' => TRUE);
}

/**
 *  Get Sorted Assignments
 *
 */

function gradebook_get_sorted_assignments($gradebook, $tids, $order, $sort) {

  switch ($order) {
    case 'title':
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'n.title '. $sort);
      break;
    case 'due':
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'a.due_date '. $sort);
      break;
    case 'publish':
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'a.publish_date '. $sort);
      break;
    case 'possible':
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'a.possible '. $sort);
      break;
    case 'category':
    default:
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'td.name '. $sort);
  }

  $assignments = array();
  if ($result) {
    while ($assignment = db_fetch_object($result)) {
      $assignments[] = node_load($assignment->nid);
    }
  }
  return $assignments;
}

/**
 * Menu callback; prints an assignment list with student grades.
 * Leave this callback in gradebook.module to make it easy for other gradebook modules to find and use.
 * All other page callbacks go in
 *   gradebook.pages.inc (pages associated with displaying or editing a grade), or
 *   gradebook.cateogry.inc (pages associated with gradebook categories)
 */
function gradebook_gradebook_page($gradebook, $uid = NULL, $export = FALSE) {
  global $user;
  $user = user_load(array('uid' => $user->uid));
  $assignments = array();
  $student_grades = array();
  $assignment_order = array();
  $order = isset($_GET['order']) ? $_GET['order'] : '';
  $sort = isset($_GET['sort']) ? (($_GET['sort'] == 'desc') ? 'DESC' : 'ASC') : 'ASC';

  // make sure we have permission to be here
  if (!gradebookapi_is_teacher($gradebook) && !empty($uid)) {
    if ($uid != $user->uid) {
      drupal_access_denied();
      return;
    }
  }

  // if not a teacher set uid to own
  if (!gradebookapi_is_teacher($gradebook)) {
    $uid = $user->uid;
  }

// MN: Problems here with $tids not being defined - breaks E_ALL compliance
//     for now, set it equal to an empty array.
  $tids = array();
  $assignments = gradebook_get_sorted_assignments($gradebook, $tids, $order, $sort);

  if (!empty($uid)) {
    $result = db_query("SELECT uid, name FROM {users} WHERE uid=%d", $uid);
  }
  else {
    $students = gradebookapi_get_students($gradebook);
    if ($str_uids = implode(',', $students))
      $result = db_query("SELECT u.uid, u.name FROM {users} u WHERE u.status <> 0 AND u.uid IN (". $str_uids .") ORDER BY u.name ASC");
    else {
      $result = FALSE;
    }
  }

  if ($result) {
    while ($account = db_fetch_object($result)) {
      $student_grades[$account->uid] = array();
      foreach ($assignments as $assignment) {
        $student_grades[$account->uid][$assignment->nid] = gradebookapi_get_grade($account->uid, $assignment->nid);
      }
      $student_grades[$account->uid]['total'] = gradebookapi_get_term_grade($account->uid, $gradebook->tid);
    }
  }

  return theme('gradebook_page', $gradebook, $assignments, $student_grades, $export);
}

/**
 *  Theme the gradebook page
 */
function theme_gradebook_page($gradebook, $assignments, $student_grades, $export = FALSE) {

  $sort = (isset($_GET['sort']) && ($_GET['sort'] == 'asc')) ? 'desc' : 'asc';
  if ($export) {
    $headers['category'] = array(t('category'), '');
    $headers['possible'] = array(t('possible'), '');
    $headers['due']      = array(t('due date'), '');
    $headers['publish']  = array(t('published'), '');
    $headers['title']    = array(t('title'), '');
    $headers['average']  = array('', t('average'));
  }
  else {
    $headers = array(
      'category' => array(l('category', 'gradebook/'. $gradebook->tid, array('query' => 'order=category&sort='. $sort))),
      'possible' => array(l('possible', 'gradebook/'. $gradebook->tid, array('query' => 'order=possible&sort='. $sort))),
      'due'      => array(l('due date', 'gradebook/'. $gradebook->tid, array('query' => 'order=due&sort='. $sort))),
      'publish'  => array(l('published', 'gradebook/'. $gradebook->tid, array('query' => 'order=publish&sort='. $sort))),
      'title'    => array(l('title', 'gradebook/'. $gradebook->tid, array('query' => 'order=title&sort='. $sort))),
      'edit-all' => array(''),
      'average'  => array(''),
    );
    $headers['category'][] = array('data' => '', 'class' => 'category');
    $headers['possible'][] = array('data' => '', 'class' => 'possible');
    $headers['publish'][]  = array('data' => '', 'class' => 'date');
    $headers['due'][]      = array('data' => '', 'class' => 'date');
    $headers['title'][]    = array('data' => '', 'class' => 'title');
    $headers['edit-all'][] = array('data' => '', 'class' => 'edit-all');
    $headers['average'][]  = array('data' => t('Averages'), 'class' => 'average');
  }
  $rows = array();

  $sort = NULL;
  if ($order = isset($_GET['order']) ? $_GET['order'] : '') {
    $sort .= 'order='. $order;
    $sort .= '&sort='. (isset($_GET['sort']) ? (($_GET['sort'] == 'desc') ? 'asc' : 'desc') : 'asc');
  }

  foreach ($assignments as $assignment) {
    $terms = gradebookapi_assignment_terms($assignment);
    $category = '';
    foreach ($terms as $term) {
      if ($term->tid != $gradebook->tid) {
        if ($category) {
          $category .= ', '. $term->name;
        }
        else {
          $category .= $term->name;
        }
      }
    }
    if ($export) {
      $headers['category'][] = $category;
      $headers['possible'][] = $assignment->possible;
      $headers['publish'][]  = format_date($assignment->publish_date, 'custom', 'Y/m/d');
      $headers['due'][]      = format_date($assignment->due_date, 'custom', 'Y/m/d');
      $headers['title'][]    = $assignment->title;
    }
    else {
      $headers['category'][] = array('data' => $category, 'class' => 'category');
      $headers['possible'][] = array('data' => $assignment->possible, 'class' => 'possible');
      $headers['publish'][]  = array('data' => format_date($assignment->publish_date, 'custom', 'Y/m/d'), 'class' => 'date');
      $headers['due'][]      = array('data' => format_date($assignment->due_date, 'custom', 'Y/m/d'), 'class' => 'date');
      $headers['title'][]    = array('data' => l($assignment->title, 'node/'. $assignment->nid), 'class' => 'title');

      if (gradebookapi_is_teacher($gradebook)) {
        $headers['edit-all'][] = array('data' => l('[edit all]', 'gradebook/'. $gradebook->tid .'/grade-assignment/'. $assignment->nid), 'class' => 'edit-all');
      }
      else {
        $headers['edit-all'][] = array('data' => '', 'class' => 'edit-all');
      }
    }
  }

  $sum = array();  // total assignment score across all graded students
  $sum_possible = array(); // total possible score across all graded students

  foreach ($student_grades as $uid => $grades) {
    $row = array();
    $account = user_load(array('uid' => $uid));
    if ($export) {
      $row[] = $account->name;
    }
    else {
      if (gradebookapi_is_teacher($gradebook)) {
        $row[] = l($account->name, 'gradebook/'. $gradebook->tid .'/edit-all/'. $account->uid);
      }
      else {
        $row[] = check_plain($account->name);
      }
    }
    $grade = gradebookapi_get_term_grade($account->uid, $gradebook->tid);
    $row[] = theme_gradebook_term_grade($gradebook, $grade, $export);
    foreach ($assignments as $assignment) {
      $grade = $grades[$assignment->nid];
      $row[] = theme_gradebook_assignment_grade($gradebook, $grade, $export);
      if ((!isset($grade->exempt) || $grade->exempt == FALSE) && isset($grade->earned)) {
        $sum[$assignment->nid] += $grade->earned;
        $sum_possible[$assignment->nid] += $grade->possible;
      }
    }
    $rows[] = $row;
  }
  // prepare averages row
  foreach ($assignments as $assignment) {
    $sp = $sum_possible[$assignment->nid];
    $avgfmt = ($sp > 0) ? sprintf('%.1f', ($sum[$assignment->nid]/$sp)*100) : NULL;
    $avgstr = ($sp > 0) ? array( 'data' => (' ('. $avgfmt .'%)'), 'class' => 'average') : array('data' => '', 'class' => 'average');
    $headers['average'][] = ($export) ? $avgfmt : $avgstr;
  }

  if ($export) {
    return array_merge($headers, $rows);
  }

  $output = '<div id="gradebook-container">';
  $output .= theme('gradebook_table', $headers, $rows, array('class' => 'gradebook'));
  $output .= '</div>';

  return $output;
}

/**
 *  Theme the assignment row
 *
 */
function theme_gradebook_assignment_grade($gradebook, $grade, $export = FALSE) {

  if (isset($grade->earned)) {
    $text = $grade->earned;
  }
  else {
    $text = variable_get('gradebook_empty_grade', '--');
  }
  if ($export) {
    return $text;
  }
  $ret = array();
  $ret['data'] = l($text, 'gradebook/'. $gradebook->tid .'/grade/'. $grade->uid .'/'. $grade->nid);
  $ret['class'] = (isset($grade->exempt) && $grade->exempt == TRUE) ? 'exempt' : 'grade';

  return $ret;
}

/**
 *  Theme the gradebook grade
 *
 */
function theme_gradebook_term_grade($gradebook, $grade, $export) {
  $ret = array();
  if (isset($grade->earned)) {
    $ret['data'] = $grade->earned .'/'. $grade->possible . (($grade->earned && $grade->possible)?(' ('. sprintf('%.1f', ($grade->earned/$grade->possible)*100) .'%)'):'');
  }
  else {
    $ret['data'] = variable_get('gradebook_empty_grade', '--');
  }
  $ret['class'] = 'term_grade';

  return ($export) ? $ret['data'] : $ret;
}

function _gradebook_tablesort_sql($headers, $before = '') {
  foreach ($headers as $header) {
    $ts = tablesort_init($header);
    if (isset($ts['sql'])) {
      $sql = db_escape_string($ts['sql']);
      $sort = drupal_strtoupper(db_escape_string($ts['sort']));
      return " ORDER BY $before $sql $sort";
    }
  }
}

function theme_gradebook_table($headers, $rows, $attributes = array(), $caption = NULL) {
  $output = '<table'. drupal_attributes($attributes) .">\n";

  if (isset($caption)) {
    $output .= '<caption>'. $caption ."</caption>\n";
  }

  // Format the table header:
  if (count($headers)) {
    $output .= ' <thead>';
    foreach ($headers as $header) {
      $ts = tablesort_init($header);
      $output .= '  <tr>';
      foreach ($header as $cell) {
        $cell = tablesort_header($cell, $header, $ts);
        $output .= _theme_table_cell($cell, 1);
      }
      $output .= '  </tr>';
    }
    $output .= " </thead>\n";
  }

  // Format the table rows:
  $output .= "<tbody>\n";
  if (count($rows)) {
    foreach ($rows as $number => $row) {
      $attributes = array();

      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        foreach ($row as $key => $value) {
          if ($key == 'data') {
            $cells = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $cells = $row;
      }

      // Add odd/even class
      $class = ($number % 2 == 1) ? 'even': 'odd';
      if (isset($attributes['class'])) {
        $attributes['class'] .= ' '. $class;
      }
      else {
        $attributes['class'] = $class;
      }

      // Build row
      $output .= ' <tr'. drupal_attributes($attributes) .'>';
      $i = 0;
      foreach ($cells as $cell) {
        $cell = tablesort_cell($cell, $header, $ts, $i++);
        $output .= _theme_table_cell($cell, 0);
      }
      $output .= " </tr>\n";
    }
  }

  $output .= "</tbody></table>\n";
  return $output;
}



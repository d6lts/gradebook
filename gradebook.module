<?php
// $Id$

/**
 * hook_perm
 *
 * @return array
 */
function gradebook_perm() {
  return array('admin gradebook');
}

/**
 * hook_menu
 *
 * @return array
 */
function gradebook_menu($may_cache) {
  global $user;
  $items = array();
  
  $access = $user->uid; // login is required
  
  // The $may_cache parameter is used to divide menu items into two parts. Those
  // returned when $may_cache is true must be consistently applicable for the
  // current user at all times; the others may change or be defined at only
  // certain paths. Most modules will have excusively cacheable menu items.
  if ($may_cache) {
    $items[] = array(
      'path' => 'gradebook',
      'title' => t('Gradebooks'),
      'callback' => 'gradebook_list_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM,
    );
    
    // admin menu
    $items[] = array(
      'path' => 'admin/gradebook/gradebook',
      'title' => t('Gradebooks'),
      'description' => t('Control gradebooks and change gradebook settings.'),
      'callback' => 'gradebook_admin_list_page',
      'access' => user_access('administer gradebook'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/gradebook/gradebook/list',
      'title' => t('List'),
      'access' => user_access('administer gradebook'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'path' => 'admin/gradebook/gradebook/add',
      'title' => t('Add gradebook'),
      'callback' => 'gradebook_add_page',
      'access' => user_access('administer gradebook'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/gradebook/gradebook/edit',
      'title' => t('Edit gradebook'),
      'callback' => 'gradebook_edit_page',
      'access' => user_access('administer gradebook'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'admin/gradebook/gradebook/settings',
      'title' => t('Settings'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('gradebook_admin_settings'),
      'weight' => 5,
      'access' => user_access('administer gradebook'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  else {
    if (arg(0) == 'gradebook' && is_numeric(arg(1))) {
      $tid = arg(1);
      $uid = (is_int(arg(2))) ? arg(2) : NULL;
  
      $gradebook = gradebookapi_gradebook_load($tid);
      if ($gradebook) {
        $items[] = array(
        'path'               => 'gradebook/'.$tid,
        'title'              => $gradebook->name,
        'callback'           => 'gradebook_gradebook_page',
        'callback arguments' => array($gradebook, $uid),
        'access'             => user_access('access content'),
        );
        $items[] = array(
        'path'               => 'gradebook/'.$tid.'/view',
        'title'              => t('view'),
        'type'               => MENU_DEFAULT_LOCAL_TASK,
        'weight'             => -10,
        );
        $items[] = array(
        'path'               => 'gradebook/'.$tid.'/catlist',
        'title'              => t('list categories'),
        'callback'           => 'gradebook_category_page',
        'callback arguments' => array($gradebook),
        'access'             => gradebookapi_is_teacher($gradebook),
        'type'               => MENU_LOCAL_TASK,
        'weight'             => 0,
        );
        $items[] = array(
        'path'               => 'gradebook/'.$tid.'/catadd',
        'title'              => t('add category'),
        'callback'           => 'gradebook_category_add_page',
        'callback arguments' => array($gradebook),
        'access'             => gradebookapi_is_teacher($gradebook),
        'type'               => MENU_LOCAL_TASK,
        'weight'             => 1,
        );
  
        if (arg(2) == 'catedit' && is_numeric(arg(3))) {
          $cat_tid = arg(3);
          $items[] = array(
          'path'               => 'gradebook/'.$tid.'/catedit/'.$cat_tid,
          'title'              => t('edit category'),
          'callback'           => 'gradebook_category_edit_page',
          'callback arguments' => array($gradebook, $cat_tid),
          'access'             => gradebookapi_is_teacher($gradebook),
          'type'               => MENU_LOCAL_TASK,
          'weight'             => 2,
          );
        }
  
        if (arg(2) == 'grade' && is_numeric(arg(3)) && is_numeric(arg(4))) {
          $uid = arg(3);
          $nid = arg(4);
          $items[] = array(
          'path'               => 'gradebook/'.$tid.'/grade/'.$uid.'/'.$nid,
          'title'              => t('edit grade'),
          'callback'           => 'gradebook_grade_page',
          'callback arguments' => array($gradebook, $uid, $nid),
          'access'             => gradebookapi_is_teacher($gradebook),
          'type'               => MENU_CALLBACK,
          'weight'             => 2,
          );
        }
      }
    }

    // Add the CSS for this module
    // We put this in !$may_cache so it's only added once per request
    drupal_add_css(drupal_get_path('module', 'gradebook') .'/gradebook.css');
  }
  
  return $items;
}

function gradebook_admin_settings() {
  $form = array();
  
  drupal_set_title(t('Gradebook configuration'));

  $form['sitewide'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Sitewide gradebook settings'),
    '#weight'      => -1,
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#description' => 'Any student and teacher roles selected here will apply to ALL gradebooks. If you are using the OG_Gradebook module, this is probably not what you want.',
  );
  
  $roles = user_roles();
  unset($roles[DRUPAL_ANONYMOUS_RID]);
  
  $sel_roles = (array) variable_get('gradebook_student_rids', array());
  $default = array();
  foreach ($sel_roles as $rid => $value) {
    if ($value) {
      $default[] = $rid;
    }
  }
  $form['sitewide']['gradebook_student_rids'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Student roles'),
    '#default_value' => $default,
    '#options' => $roles,
    '#required' => TRUE,
  );
  
  $sel_roles = (array) variable_get('gradebook_teacher_rids', array());
  $default = array();
  foreach ($sel_roles as $rid => $value) {
    if ($value) {
      $default[] = $rid;
    }
  }
  $form['sitewide']['gradebook_teacher_rids'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Teacher roles'),
    '#default_value' => $default,
    '#options' => $roles,
    '#required' => TRUE,
  );

  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General gradebook settings'),
    '#weight' => 0,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['general']['gradebook_empty_grade'] = array(
    '#type' => 'textfield',
    '#title' => t('Empty grade'),
    '#default_value' => variable_get('gradebook_empty_grade', '--'),
    '#description' =>  t('This the text displayed when no grade has been entered.'),
    '#required' => TRUE,
  );
  
  $number = drupal_map_assoc(array(10, 25, 50, 75, 100));
  $form['general']['gradebooks_per_page'] = array(
    '#type' => 'select',
    '#title' => t('Gradebooks per page'),
    '#default_value' => variable_get('gradebooks_per_page', 25),
    '#options' => $number,
    '#description' => t('The default number of gradebooks displayed per page.'),
  );

  return system_settings_form($form);
}

/**
 * Returns an overview list of existing gradebooks
 */
function gradebook_admin_list_page() {
  $vid = gradebookapi_get_vid();
  
  $header = array(
    array('data' => t('Name'), 'field' => 't.name', 'sort' => 'asc'),
    array('data' => t('Operations')),
  );
  
  $sql  = 'SELECT DISTINCT t.tid, t.name FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE h.parent = 0 AND t.vid = '.$vid;
  $sql .= tablesort_sql($header, 'weight, ');
  $result = pager_query($sql, variable_get('gradebooks_per_page', 25));
  
  while ($term = db_fetch_object($result)) {
    $rows[] = array('name' => l($term->name, 'gradebook/'.$term->tid), 'operations' => l(t('edit'), 'admin/gradebook/gradebook/edit/'. $term->tid));
  }
  
  $output .= theme('table', $header, $rows);  
  $output .= theme('pager');
  
  return $output;
}

function gradebook_add_page() { 
  return drupal_get_form('gradebook_gradebook_form');
}

function gradebook_edit_page($tid=-1) {
  // TODO: check to make sure gradebook tid is valid
  
  if ($_POST['op'] == t('Delete') || $_POST['confirm']) {
    return drupal_get_form('gradebook_confirm_gradebook_delete', $tid);
  }
  
  $term = taxonomy_get_term($tid);
  return drupal_get_form('gradebook_gradebook_form', (array)$term);
}

function gradebook_gradebook_form($edit = array()) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Gradebook name'),
    '#default_value' => $edit['name'],
    '#maxlength' =>  64,
    '#description' => t('The gradebook name is used to identify related assignments/grades.'),
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $edit['description'],
    '#description' => t('The gradebook description can give users more information about the assignments/grades it contains.'),
  );
  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $edit['weight'],
    '#description' => t('When listing gradebooks, those with lighter (smaller) weights get listed before gradebooks with heavier (larger) weights. Gradebooks with equal weights are sorted alphabetically.'),
  );

  $form['vid'] = array('#type' => 'hidden', '#value' => gradebookapi_get_vid());
  $form['submit' ] = array('#type' => 'submit', '#value' => t('Submit'));
  if ($edit['tid']) {
    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));
    $form['tid'] = array('#type' => 'hidden', '#value' => $edit['tid']);
  }

  return $form;
}

function gradebook_gradebook_form_submit($form_id, $form_values) {
  $status = taxonomy_save_term($form_values);
  switch ($status) {
    case SAVED_NEW:
      drupal_set_message(t('Created new gradebook %term.', array('%term' => $form_values['name'])));
      break;
    case SAVED_UPDATED:
      drupal_set_message(t('The gradebook %term has been updated.', array('%term' => $form_values['name'])));
      break;
  }
  return 'admin/gradebook/gradebook';
}

/**
 * Returns a confirmation page for deleting a gradebook taxonomy term.
 *
 * @param $tid ID of the term to be deleted
 */
function gradebook_confirm_gradebook_delete($tid) {
  // TODO: make sure this is a valid gradebook term
  
  $term = taxonomy_get_term($tid);

  $form['tid'] = array('#type' => 'value', '#value' => $tid);
  $form['name'] = array('#type' => 'value', '#value' => $term->name);

  return confirm_form($form, t('Are you sure you want to delete the gradebook %name?', array('%name' => $term->name)), 'admin/gradebook/gradebook', t('Deleting a gradebook will delete all associated grades as well. This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Implementation of forms api _submit call. Deletes a gradebook after confirmation.
 */
function gradebook_confirm_gradebook_delete_submit($form_id, $form_values) {
  // TODO: delete grades
  var_dump($form_values);
  taxonomy_del_term($form_values['tid']);
  drupal_set_message(t('The gradebook %term and all associated grades have been deleted.', array('%term' => $form_values['name'])));
  watchdog('content', t('gradebook: deleted %term and associated grades.', array('%term' => $form_values['name'])));

  return 'admin/gradebook/gradebook';
}

/**
 * Menu callback; prints a forum listing.
 */
function gradebook_list_page() {
  $vid = gradebookapi_get_vid();
  
  $header = array(
    array('data' => t('Name'), 'field' => 't.name', 'sort' => 'asc'),
  );
  
  $sql  = 'SELECT DISTINCT t.tid, t.name FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE h.parent = 0 AND t.vid = '.$vid;
  $sql .= tablesort_sql($header, 'weight, ');
  $result = pager_query($sql, variable_get('gradebooks_per_page', 25));
  
  while ($term = db_fetch_object($result)) {
    $rows[] = array('name' => l($term->name, 'gradebook/'.$term->tid));
  }
  
  $output .= theme('table', $header, $rows);  
  $output .= theme('pager');
  
  return $output;
}

function gradebook_gradebook_page($gradebook, $uid=NULL) {
  global $user;
  $assignments = array();
  $student_grades = array();
  $assignment_order = array();
  $order = isset($_GET['order']) ? $_GET['order'] : '';
  $sort = isset($_GET['sort']) ? (($_GET['sort'] == 'desc') ? 'desc' : 'asc') : 'asc';
  
  // make sure we have permission to be here
  if (!gradebookapi_is_teacher($gradebook) && $uid) {
    if ($uid != $user->uid) {
      drupal_access_denied();
      return;
    }
  }
  
  // if not a teacher set uid to own
  if (!gradebookapi_is_teacher($gradebook)) {
    $uid = $user->uid;
  }
  
  // get sorted assignments
  switch ($order) {
    case 'title':
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'n.title ASC');
      while ($assignment = db_fetch_object($result)) {
        $assignments[] = node_load($assignment->nid);
      }
      break;
    case 'date':
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'n.created ASC');
      while ($assignment = db_fetch_object($result)) {
        $assignments[] = node_load($assignment->nid);
      }
      break;
      break;
    case 'possible':
      $values = array();
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'a.possible ASC');
      while ($assignment = db_fetch_object($result)) {
        $assignments[] = node_load($assignment->nid);
      }
      break;
    case 'category':
    default:
      $result = gradebookapi_select_nodes($gradebook, $tids, 'or', 0, FALSE, 'td.name ASC');
      while ($assignment = db_fetch_object($result)) {
        $assignments[] = node_load($assignment->nid);
      }
      break;
  }
  
  if ($uid) {
    $result = db_query("SELECT uid, name FROM {users} WHERE uid=%d", $uid);
  }
  else {
    $students = gradebookapi_get_students($gradebook);
    if ( $str_uids = implode(',', $students) )
      $result = db_query("SELECT u.uid, u.name FROM {users} u WHERE u.status != 0 AND u.uid IN (". $str_uids .") ORDER BY u.name ASC");
    else {
      $result = FALSE;
    }
  }

  if ($result) {
    while ($account = db_fetch_object($result)) {
      $student_grades[$account->uid] = array();
      foreach ($assignments as $assignment) {
        $student_grades[$account->uid][$assignment->nid] = gradebookapi_get_grade($account->uid, $assignment->nid);
      }
      $student_grades[$account->uid]['total'] = gradebookapi_get_term_grade($account->uid, $gradebook->tid);
    }
  }
  
  return theme('gradebook_page', $gradebook, $assignments, $student_grades);
}

function theme_gradebook_page($gradebook, $assignments, $student_grades) {
  $headers = array(
    'category' => array(l('category', 'gradebook/'.$gradebook->tid, '', 'order=category&sort=asc')),
    'possible' => array(l('possible', 'gradebook/'.$gradebook->tid, '', 'order=possible&sort=asc')),
    'date' => array(l('date', 'gradebook/'.$gradebook->tid, '', 'order=date&sort=asc')),
    'title' => array(l('title', 'gradebook/'.$gradebook->tid, '', 'order=title&sort=asc')),
  );
  $rows = array();
  
  $sort = NULL;
  if ($order = isset($_GET['order']) ? $_GET['order'] : '') {
    $sort .= 'order=' . $order;
    $sort .= '&sort=' . (isset($_GET['sort']) ? (($_GET['sort'] == 'desc') ? 'desc' : 'asc') : 'asc');
  }
  
  foreach ($assignments as $assignment) {
    $terms = gradebookapi_assignment_terms($assignment);
    $category = '';
    foreach ($terms as $term) {
      if ($term->tid != $gradebook->tid) {
        if ($category) {
          $category .= ', ' . $term->name;
        }
        else {
          $category .= $term->name;
        }
      }
    }
    $headers['category'][] = array('data' => $category, 'class' => 'assignment_category');
    $headers['possible'][] = array('data' => $assignment->possible, 'class' => 'assignment_possible');
    $headers['date'][]     = array('data' => format_date($assignment->created, 'custom', 'Y/m/d'), 'class' => 'assignment_date');
    $headers['title'][]    = array('data' => l($assignment->title, 'node/'.$assignment->nid), 'class' => 'assignment_title');
  }
  
  foreach ($student_grades as $uid => $grades) {
    $row = array();
    
    $account = user_load(array('uid' => $uid));
    //$row[] = theme('username', $account);
    $row[] = l($account->name, 'gradebook/' . $gradebook->tid . '/' . $account->uid, '', $sort);
    
    foreach ($assignments as $assignment) {
      $grade = $grades[$assignment->nid];
      $row[] = theme_gradebook_assignment_grade($gradebook, $grade);
    }

    $grade = gradebookapi_get_term_grade($account->uid, $gradebook->tid);
    $row[] = theme_gradebook_term_grade($gradebook, $grade);
    $rows[] = $row;
  }

  return theme('gradebook_table', $headers, $rows, array('class' => 'gradebook'));
}

function theme_gradebook_assignment_grade($gradebook, $grade) {
  if (isset($grade->earned)) {
    //$results = gradebookapi_invoke_gradebookapi('view', 'grade', $grade);
    if (count($results)) {
      $text = array_pop($results);
    }
    else {
      $text = $grade->earned;
    }
  }
  else {
    $text = variable_get('gradebook_empty_grade', '--');
  }
  
  $ret = array();
  if (gradebookapi_is_teacher($gradebook) || $grade->note) {
    $ret['data'] = l($text, 'gradebook/' . $gradebook->tid . '/grade/' . $grade->uid . '/' . $grade->nid);
  }
  else {
    $ret['data'] = $text;
  }
  $ret['class'] = ($grade->exempt?'exempt':'');
  
  return $ret;
}

function theme_gradebook_term_grade($gradebook, $grade) {
  if (isset($grade->earned)) {
    //$results = gradebookapi_invoke_gradebookapi('view', 'grade', $grade);
    if (count($results)) {
      return array_pop($results);
    }
    else {
      return $grade->earned . '/' . $grade->possible . (($grade->earned && $grade->possible)?(' (' . sprintf('%.1f', ($grade->earned/$grade->possible)*100) . '%)'):'');
    }
  }
  else {
    return variable_get('gradebook_empty_grade', '--');
  }
}

function _gradebook_tablesort_sql($headers, $before = '') {
  foreach ($headers as $header) {
    $ts = tablesort_init($header);
    if ($ts['sql']) {
      $sql = db_escape_string($ts['sql']);
      $sort = drupal_strtoupper(db_escape_string($ts['sort']));
      return " ORDER BY $before $sql $sort";
    }
  }
}

function theme_gradebook_table($headers, $rows, $attributes = array(), $caption = NULL) {
  $output = '<table'. drupal_attributes($attributes) .">\n";

  if (isset($caption)) {
    $output .= '<caption>'. $caption ."</caption>\n";
  }

  // Format the table header:
  if (count($headers)) {
    $output .= ' <thead>';
    foreach ($headers as $header) {
      $ts = tablesort_init($header);
      $output .= '  <tr>';
      foreach ($header as $cell) {
        $cell = tablesort_header($cell, $header, $ts);
        $output .= _theme_table_cell($cell, 1);
      }
      $output .= '  </tr>';
    }
    $output .= " </thead>\n";
  }

  // Format the table rows:
  $output .= "<tbody>\n";
  if (count($rows)) {
    foreach ($rows as $number => $row) {
      $attributes = array();

      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        foreach ($row as $key => $value) {
          if ($key == 'data') {
            $cells = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $cells = $row;
      }

      // Add odd/even class
      $class = ($number % 2 == 1) ? 'even': 'odd';
      if (isset($attributes['class'])) {
        $attributes['class'] .= ' '. $class;
      }
      else {
        $attributes['class'] = $class;
      }

      // Build row
      $output .= ' <tr'. drupal_attributes($attributes) .'>';
      $i = 0;
      foreach ($cells as $cell) {
        $cell = tablesort_cell($cell, $header, $ts, $i++);
        $output .= _theme_table_cell($cell, 0);
      }
      $output .= " </tr>\n";
    }
  }

  $output .= "</tbody></table>\n";
  return $output;
}

function gradebook_category_page($gradebook) {
  // TODO: code borrowed from forum.module
  //       needs serious cleanup
  $vid = gradebookapi_get_vid();
  $destination = drupal_get_destination();

  $header = array(t('Name'), t('Operations'));
  $vocabulary = taxonomy_get_vocabulary($vid);

  //drupal_set_title(check_plain($vocabulary->name));
  $start_from      = $_GET['page'] ? $_GET['page'] : 0;
  $total_entries   = 0;  // total count for pager
  $page_increment  = 25; // number of tids per page
  $displayed_count = 0;  // number of tids shown

  $tree = taxonomy_get_tree($vocabulary->vid, $gradebook->tid);
  foreach ($tree as $term) {
    $total_entries++; // we're counting all-totals, not displayed
    if (($start_from && ($start_from * $page_increment) >= $total_entries) || ($displayed_count == $page_increment)) { continue; }
    //$rows[] = array(str_repeat('--', $term->depth) . ' ' . l($term->name, 'gradebook/' . $gradebook->tid . "/category/edit/$term->tid"), l(t('edit'), 'gradebook/' . $gradebook->tid . "/category/edit/$term->tid", array(), $destination));
    $rows[] = array(str_repeat('--', $term->depth) . ' ' . $term->name, l(t('edit'), 'gradebook/'.$gradebook->tid.'/catedit/'.$term->tid, array(), $destination));
    $displayed_count++; // we're counting tids displayed
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No categories available.'), 'colspan' => '2'));
  }

  $GLOBALS['pager_page_array'][] = $start_from;  // FIXME
  $GLOBALS['pager_total'][] = intval($total_entries / $page_increment) + 1; // FIXME

  if ($total_entries >= $page_increment) {
    $rows[] = array(array('data' => theme('pager', NULL, $page_increment), 'colspan' => '2'));
  }

  return theme('table', $header, $rows, array('id' => 'taxonomy'));
}

function gradebook_category_add_page($gradebook) { 
  return drupal_get_form('gradebook_category_form', $gradebook);
}

function gradebook_category_edit_page($gradebook, $tid=-1) {
  // TODO: check to make sure category tid is valid
  
  if ($_POST['op'] == t('Delete') || $_POST['confirm']) {
    return drupal_get_form('gradebook_confirm_category_delete', $tid);
  }
  
  $term = taxonomy_get_term($tid);
  return drupal_get_form('gradebook_category_form', $gradebook, (array)$term);
}

function gradebook_category_form($gradebook, $edit = array()) {
  $form['name'] = array(
    '#title' => t('Category name'),
    '#type' => 'textfield',
    '#default_value' => $edit['name'],
    '#maxlength' =>  64,
    '#description' => t('The category name is used to identify related assignments.'),
    '#required' => TRUE
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $edit['description'],
    '#description' => t('The category description can give users more information about the assignments it contains.')
  );
  $form['parent']['#tree'] = TRUE;
  $form['parent'][0] = _gradebook_parent_select($gradebook->tid, $edit['tid'], t('Parent'));
  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $edit['weight'],
    '#description' => t('When listing categories, those with with light (small) weights get listed before containers with heavier (larger) weights. Categories with equal weights are sorted alphabetically.')
  );
  
  $form['vid'] = array('#type' => 'hidden', '#value' => gradebookapi_get_vid());
  $form['submit' ] = array('#type' => 'submit', '#value' => t('Submit'));
  if ($edit['tid']) {
    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));
    $form['tid'] = array('#type' => 'hidden', '#value' => $edit['tid']);
  }

  return $form;
}

function gradebook_category_form_submit($form_id, $form_values) {
  $status = taxonomy_save_term($form_values);
  switch ($status) {
    case SAVED_NEW:
      drupal_set_message(t('Created new %type %term.', array('%term' => $form_values['name'], '%type' => t('category'))));
      break;
    case SAVED_UPDATED:
      if ($form_values['parent_old'] != $form_values['parent'][0]) {
        gradebookapi_calc_grades_all_users($form_values['parent_old']);
        gradebookapi_calc_grades_all_users($form_values['parent'][0]);
      }
      drupal_set_message(t('The %type %term has been updated.', array('%term' => theme('placeholder', $form_values['name']), '%type' => t('category'))));
      break;
  }
}

function gradebook_grade_view($gradebook, $grade) {
  $grade = (object)$grade;
  $account = user_load(array('uid' => $grade->uid));
  $node = node_load($grade->nid);

  // TODO: cleanup grade view rendering
  //       ideally edit is in-place in gradebook using AJAX
  $form['user'] = array(
    '#value' => 'Student: ' . $account->name . "<br />\n",
  );
  
  $form['node'] = array(
    '#value' => 'Assignment: ' . $node->title . "<br />\n",
  );
  
  $form['possible'] = array(
    '#value' => 'Possible: ' . $node->possible . "<br />\n",
  );
  
  $form['earned'] = array(
    '#value' => 'Earned: ' . $grade->earned . "<br />\n",
  );
  
  $form['exempt'] = array(
    '#value' => 'Exempt: ' . $grade->exempt . "<br />\n",
  );
  
  $form['note'] = array(
    '#value' => 'Note: ' . $grade->note . "<br />\n",
  );
  
  return drupal_get_form('gradebook_grade_view', $form);
}

function gradebook_grade_page($gradebook, $uid, $nid) {
  $account = user_load(array('uid' => $uid));
  $node = node_load($nid);
  $grade = gradebookapi_get_grade($uid, $nid);
  
  return drupal_get_form('gradebook_grade_form', $gradebook, $account, $node, (array)$grade);
}

function gradebook_grade_form($gradebook, $account, $node, $edit=array()) {
  // TODO: cleanup grade form rendering
  //       ideally edit is in-place in gradebook using AJAX
  $form['user'] = array(
    '#value' => 'Student: ' . $account->name . "<br />\n",
  );
  
  $form['node'] = array(
    '#value' => 'Assignment: ' . $node->title . "<br />\n",
  );
  
  $form['possible'] = array(
    '#value' => 'Possible: ' . $node->possible . "<br />\n",
  );
  
  $form['earned'] = array(
    '#title' => t('Earned'),
    '#type' => 'textfield',
    '#default_value' => $edit['earned'],
    '#maxlength' =>  64,
    '#description' => t('The grade earned.'),
    '#required' => TRUE
  );
  
  $form['exempt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exempt student from this assignment'),
    '#default_value' => $edit['exempt'],
  );
  
  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Note to student'),
    '#default_value' => $edit['note'],
  );

  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $account->uid,
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function gradebook_grade_form_validate($form_id, $form_values) {
  $account = user_load(array('uid' => $form_values['uid']));
  $node = node_load($form_values['nid']);
  
  if (!$account || !$node) {
    form_set_error('earned', t('The UID/NID has an error.'));
  }
  
  if (is_numeric($form_values['earned']) ? intval($form_values['earned']) != $form_values['earned'] : TRUE) {
    form_set_error('earned', t('The earned value for the assignment must be an integer.'));
  }
  
  $grade = (object)$form_values;
  $grade->possible = $node->possible;
  //gradebookapi_invoke_gradebookapi('validate', 'grade', $grade);
}

function gradebook_grade_form_submit($form_id, $form_values) {
  $account = user_load(array('uid' => $form_values['uid']));
  $node = node_load($form_values['nid']);
  
  $grade = (object)$form_values;
  $grade->possible = $node->possible;
  //gradebookapi_invoke_gradebookapi('submit', 'grade', $grade);
  
  gradebookapi_set_grade($grade);
  drupal_set_message(t('Saved %type.', array('%type' => t('grade'))));
  
  //return _gradebook_base_url(); 
}

function _gradebook_parent_select($root, $tid, $title) {
  $parents = taxonomy_get_parents($tid);
  if ($parents) {
    $parent = array_shift($parents);
    $parent = $parent->tid;
  }
  else {
    $parent = $root;
  }

  $children = taxonomy_get_tree(gradebookapi_get_vid(), $tid);

  // A term can't be the child of itself, nor of its children.
  foreach ($children as $child) {
    $exclude[] = $child->tid;
  }
  $exclude[] = $tid;

  $tree = taxonomy_get_tree(gradebookapi_get_vid(), $root);
  $options[$root] = '<'. t('root') .'>';
  if ($tree) {
    foreach ($tree as $term) {
      if (!in_array($term->tid, $exclude)) {
        $options[$term->tid] = str_repeat('--', $term->depth) . $term->name;
      }
    }
  }

  return array('#type' => 'select', '#title' => $title, '#default_value' => $parent, '#options' => $options, '#description' => $description, '#required' => TRUE);
}

function gradebook_confirm_category_delete($tid) {
  // TODO: make sure this is a valid category term
  
  $term = taxonomy_get_term($tid);

  $form['tid'] = array('#type' => 'value', '#value' => $tid);
  $form['name'] = array('#type' => 'value', '#value' => $term->name);

  return confirm_form($form, t('Are you sure you want to delete the category %name?', array('%name' => $term->name)), 'admin/forums', t('Deleting a category will delete all categories. This action cannot be undone.'), t('Delete'), t('Cancel'));
}

function gradebook_confirm_category_delete_submit($form_id, $form_values) {
  taxonomy_del_term($form_values['tid']);
  drupal_set_message(t('The category %term and all sub-categories and associated assignments have been deleted.', array('%term' => theme('placeholder', $form_values['name']))));
  watchdog('content', t('gradebook: deleted %term and all its sub-categories and associated posts.', array('%term' => theme('placeholder', $form_values['name']))));
}

function gradebook_rebuild_page($gradebook) {
  gradebookapi_rebuild_grades($gradebook->tid);
  drupal_goto('gradebook/' . $gradebook->tid);
}

/**
 * hook_gradebookapi_students
 *
 * @return array
 */
function gradebook_gradebookapi_students($gradebook) {
  $students = array();

  $roles = user_roles();
  unset($roles[DRUPAL_ANONYMOUS_RID]);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
    
  $sel_roles = (array) variable_get('gradebook_student_rids', array());
  foreach ($sel_roles as $rid => $value) {
    if (!$value) {
      unset($roles[$rid]);
    }
  }
    
  if (count($roles)) {
    if ( $str_rids = implode(',', array_keys($roles)) ) {
      $result = db_query("SELECT u.uid FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE u.status != 0 AND r.rid IN (". $str_rids .")");
      while ($user = db_fetch_object($result)) {
        $students[$user->uid] = $user->uid;
      }
    }
  }
 
  return $students;
}

/**
 * hook_gradebookapi_teachers
 *
 * @return array
 */
function gradebook_gradebookapi_teachers($gradebook) {
  $teachers = array();

  $roles = user_roles();
  unset($roles[DRUPAL_ANONYMOUS_RID]);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
    
  $sel_roles = (array) variable_get('gradebook_teacher_rids', array());
  foreach ($sel_roles as $rid => $value) {
    if (!$value) {
      unset($roles[$rid]);
    }
  }
    
  if (count($roles)) {
    if ( $str_rids = implode(',', array_keys($roles)) ) {
      $result = db_query("SELECT u.uid FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE u.status != 0 AND r.rid IN (". $str_rids .")");
      while ($user = db_fetch_object($result)) {
        $teachers[$user->uid] = $user->uid;
      }
    }
  }
 
  return $teachers;
}

/**
 * hook_term_path from taxonomy module
 *
 * @param $term
 *   A term object.
 * @return
 *   An internal Drupal path.
 */
function gradebook_term_path($term) {
  $gradebook = gradebookapi_get_tid_gradebook($term->tid);
  return 'gradebook/' . $gradebook->tid;
}

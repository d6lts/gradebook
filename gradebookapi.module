<?php
// $Id$

/**
 * Load a gradebook object from the database.
 *
 * @param $param
 *   Either the gid of the gradebook or an array of conditions to match against in the database query
 *
 * @return
 *   A fully-populated gradebook object.
 */
function gradebookapi_load_gradebook($param = array()) {
  $arguments = array();
  if (is_numeric($param)) {
    $cond = 'gid = %d';
    $arguments[] = $param;
  }
  else {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = db_escape_string($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  
  $gradebook = db_fetch_object(db_query('SELECT gid, nid, sid FROM {gradebookapi_gradebook} WHERE '. $cond, $arguments));
  
  return $gradebook;
};

/**
 * Save a gradebook object into the database.
 *
 * @param $gradebook
 *   The gradebook object. If the gid member is not set, a new gradebook will be inserted into the DB.
 */
function gradebookapi_save_gradebook(&$gradebook) {
  $gradebook->is_new = false;

  if (empty($gradebook->gid)) {
    $gradebook->is_new = true;
    $gradebook->gid = db_next_id('{gradebookapi_gradebook}_gid');
  }

  $values = array(
    'gid' => $gradebook->gid,
    'nid' => $gradebook->nid,
    'sid' => $gradebook->sid,
  );
  $types = array(
    'gid' => '%d',
    'nid' => '%d',
    'sid' => '%d',
  );
  
  if ($gradebook->is_new) {
    $query = 'INSERT INTO {gradebookapi_gradebook} ('. implode(', ', array_keys($types)) .') VALUES ('. implode(', ', $types) .')';
  }
  else {
    $arr = array();
    foreach ($types as $key => $value) {
      $arr[] = $key .' = '. $value;
    }
    $values[] = $gradebook->gid;
    
    $query = 'UPDATE {gradebookapi_gradebook} SET '. implode(', ', $arr) .' WHERE gid = %d';
  }
  
  db_query($query, $values);
};

/**
 * Delete a gradebook.
 *
 * @param $gid
 *   The gid of the gradebook
 */
function gradebookapi_delete_gradebook($gid) {
  $assignments = db_query('SELECT aid FROM {gradebookapi_assignment} WHERE gid = %d', $gid);
  while ($assignment = db_fetch_object($assignments)) {
    db_query('DELETE FROM {gradebookapi_grade} WHERE aid = %d', $assignment->aid);
  }
  db_query('DELETE FROM {gradebookapi_assignment} WHERE gid = %d', $gid);
    
  db_query('DELETE FROM {gradebookapi_category} WHERE gid = %d', $gid);
  db_query('DELETE FROM {gradebookapi_scale} WHERE gid = %d', $gid);
  db_query('DELETE FROM {gradebookapi_gradebook} WHERE gid = %d', $gid);
  
  _gradebookapi_clear_cache($gid);
};

/**
 * Load a scale object from the database.
 *
 * @param $param
 *   Either the sid of the scale or an array of conditions to match against in the database query
 *
 * @return
 *   A fully-populated scale object.
 */
function gradebookapi_load_scale($param = array()) {
  $arguments = array();
  if (is_numeric($param)) {
    $cond = 'sid = %d';
    $arguments[] = $param;
  }
  else {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = db_escape_string($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  
  $scale = db_fetch_object(db_query('SELECT sid, name, gid, weight, value FROM {gradebookapi_scale} WHERE '. $cond, $arguments));
  
  return $scale;
};

/**
 * Save a scale object into the database.
 *
 * @param $scale
 *   The scale object. If the sid member is not set, a new scale will be inserted into the DB.
 */
function gradebookapi_save_scale(&$scale) {
  $scale->is_new = false;

  if (empty($scale->sid)) {
    $scale->is_new = true;
    $scale->sid = db_next_id('{gradebookapi_scale}_sid');
  }

  $values = array(
    'sid' => $scale->sid,
    'name' => $scale->name,
    'gid' => $scale->gid,
    'weight' => $scale->weight,
    'value' => $scale->value,
  );
  $types = array(
    'sid' => '%d',
    'name' => '%s',
    'gid' => '%d',
    'weight' => '%d',
    'value' => '%s',
  );
  
  if ($scale->is_new) {
    $query = 'INSERT INTO {gradebookapi_scale} ('. implode(', ', array_keys($types)) .') VALUES ('. implode(', ', $types) .')';
  }
  else {
    $arr = array();
    foreach ($types as $key => $value) {
      $arr[] = $key .' = '. $value;
    }
    $values[] = $scale->sid;
    
    $query = 'UPDATE {gradebookapi_scale} SET '. implode(', ', $arr) .' WHERE sid = %d';
  }
  
  db_query($query, $values);
};

/**
 * Delete a scale.
 *
 * @param $sid
 *   The sid of the scale
 */
function gradebookapi_delete_scale($sid) {
  // TODO: how do we handle data using this scale?
  db_query('DELETE FROM {gradebookapi_scale} WHERE sid = %d', $sid);
};

/**
 * Load a category object from the database.
 *
 * @param $param
 *   Either the sid of the category or an array of conditions to match against in the database query
 *
 * @return
 *   A fully-populated category object.
 */
function gradebookapi_load_category($param = array()) {
  $arguments = array();
  if (is_numeric($param)) {
    $cond = 'cid = %d';
    $arguments[] = $param;
  }
  else {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = db_escape_string($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  
  $category = db_fetch_object(db_query('SELECT cid, name, gid, sid, weight, value FROM {gradebookapi_category} WHERE '. $cond, $arguments));
  
  return $category;
};

/**
 * Save a category object into the database.
 *
 * @param $category
 *   The category object. If the cid member is not set, a new category will be inserted into the DB.
 */
function gradebookapi_save_category(&$category) {
  $category->is_new = false;

  if (empty($category->cid)) {
    $category->is_new = true;
    $category->cid = db_next_id('{gradebookapi_category}_cid');
  }

  $values = array(
    'cid' => $category->cid,
    'name' => $category->name,
    'gid' => $category->gid,
    'weight' => $category->weight,
    'value' => $category->value,
  );
  $types = array(
    'cid' => '%d',
    'name' => '%s',
    'gid' => '%d',
    'weight' => '%d',
    'value' => '%d',
  );
  
  if ($scale->is_new) {
    $query = 'INSERT INTO {gradebookapi_category} ('. implode(', ', array_keys($types)) .') VALUES ('. implode(', ', $types) .')';
  }
  else {
    $arr = array();
    foreach ($types as $key => $value) {
      $arr[] = $key .' = '. $value;
    }
    $values[] = $category->cid;
    
    $query = 'UPDATE {gradebookapi_category} SET '. implode(', ', $arr) .' WHERE cid = %d';
  }
  
  db_query($query, $values);
};

/**
 * Delete a category.
 *
 * @param $cid
 *   The cid of the category
 */
function gradebookapi_delete_category($cid) {
  // TODO: do we go through all data and set category to 0?
  // TODO: how do we handle stat calculation?
  db_query('DELETE FROM {gradebookapi_category} WHERE cid = %d', $cid);
};

/**
 * Load an assignment object from the database.
 *
 * @param $param
 *   Either the aid of the assignment or an array of conditions to match against in the database query
 *
 * @return
 *   A fully-populated assignment object.
 */
function gradebookapi_load_assignment($param = array()) {
  $arguments = array();
  if (is_numeric($param)) {
    $cond = 'aid = %d';
    $arguments[] = $param;
  }
  else {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = db_escape_string($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  
  $assignment = db_fetch_object(db_query('SELECT aid, nid, gid, cid, sid, value, startdate, enddate FROM {gradebookapi_assignment} WHERE '. $cond, $arguments));
  
  return $assignment;
};

/**
 * Save an assignment object into the database.
 *
 * @param $assignment
 *   The assignment object. If the aid member is not set, a new assignment will be inserted into the DB.
 */
function gradebookapi_save_assignment(&$assignment) {
  $assignment->is_new = false;

  if (empty($assignment->cid)) {
    $assignment->is_new = true;
    $assignment->aid = db_next_id('{gradebookapi_assignment}_aid');
  }

  $values = array(
    'aid' => $assignment->aid,
    'nid' => $assignment->nid,
    'gid' => $assignment->gid,
    'cid' => $assignment->cid,
    'sid' => $assignment->sid,
    'value' => $assignment->value,
    'startdate' => $assignment->startdate,
    'enddate' => $assignment->enddate,
  );
  $types = array(
    'aid' => '%d',
    'nid' => '%d',
    'gid' => '%d',
    'cid' => '%d',
    'sid' => '%d',
    'value' => '%d',
    'startdate' => '%d',
    'enddate' => '%d',
  );
  
  if ($scale->is_new) {
    $query = 'INSERT INTO {gradebookapi_assignment} ('. implode(', ', array_keys($types)) .') VALUES ('. implode(', ', $types) .')';
  }
  else {
    $arr = array();
    foreach ($types as $key => $value) {
      $arr[] = $key .' = '. $value;
    }
    $values[] = $assignment->aid;
    
    $query = 'UPDATE {gradebookapi_assignment} SET '. implode(', ', $arr) .' WHERE aid = %d';
  }
  
  db_query($query, $values);
};

/**
 * Delete a assignment.
 *
 * @param $aid
 *   The aid of the assignment
 */
function gradebookapi_delete_assignment($aid) {
  $assignment = gradebookapi_load_assignment($aid);

  db_query('DELETE FROM {gradebookapi_grade} WHERE aid = %d', $aid);
  db_query('DELETE FROM {gradebookapi_assignment} WHERE aid = %d', $aid);
  
  _gradebookapi_clear_cache($assignment->gid);
};

/**
 * Load a grade object from the database.
 *
 * @param $param
 *   Either the grid of the grade or an array of conditions to match against in the database query
 *
 * @return
 *   A fully-populated grade object.
 */
function gradebookapi_load_grade($param = array()) {
  $arguments = array();
  if (is_numeric($param)) {
    $cond = 'grid = %d';
    $arguments[] = $param;
  }
  else {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = db_escape_string($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  
  $grade = db_fetch_object(db_query('SELECT grid, aid, uid, value, timestamp FROM {gradebookapi_grade} WHERE '. $cond, $arguments));
  
  return $grade;
};

/**
 * Save a grade object into the database.
 *
 * @param $assignment
 *   The grade object. If the did member is not set, a new grade will be inserted into the DB.
 */
function gradebookapi_save_grade(&$grade) {
  $grade->is_new = false;

  if (empty($grade->grid)) {
    $grade->is_new = true;
    $grade->grid = db_next_id('{gradebookapi_grade}_grid');
  }

  $values = array(
    'grid' => $grade->grid,
    'aid' => $grade->aid,
    'uid' => $grade->uid,
    'value' => $grade->value,
    'timestamp' => $grade->timestamp,
  );
  $types = array(
    'grid' => '%d',
    'aid' => '%d',
    'uid' => '%d',
    'value' => '%d',
    'timestamp' => '%d',
  );
  
  if ($scale->is_new) {
    $query = 'INSERT INTO {gradebookapi_grade} ('. implode(', ', array_keys($types)) .') VALUES ('. implode(', ', $types) .')';
  }
  else {
    $arr = array();
    foreach ($types as $key => $value) {
      $arr[] = $key .' = '. $value;
    }
    $values[] = $grade->grid;
    
    $query = 'UPDATE {gradebookapi_grade} SET '. implode(', ', $arr) .' WHERE grid = %d';
  }
  
  db_query($query, $values);
};

/**
 * Delete a grade.
 *
 * @param $grid
 *   The grid of the grade
 */
function gradebookapi_delete_grade($grid) {
  $grade = gradebookapi_load_grade($grid);
  $assignment = gradebookapi_load_assignment($grade->aid);
  
  db_query('DELETE FROM {gradebookapi_grade} WHERE grid = %d', $grid);
  _gradebookapi_clear_cache($assignment->gid);
};

/**
 * Load a totals object from the database.
 *
 * @param $param
 *   An array of conditions to match against in the database query
 *
 * @return
 *   A fully-populated totals object.
 */
function gradebookapi_load_totals($param = array()) {
};

/**
 * Implementation of hook_elements()
 * Allows for creation of custom elements (scale element, etc) for the Form API
 */
/*
function gradebookapi_elements() {
};
*/

/*
function hook_gradebook_assignment() {
};
*/

/**
 * Clear a gradebook stat cache.
 *
 * @param $gid
 *   The gid of the gradebook
 */
function _gradebookapi_clear_cache($gid, $cid = 0, $aid = 0, $uid = 0) {

function _gradebookapi_cache_stats($gid) {
}
  db_query('DELETE FROM {gradebookapi_cache} WHERE gid = %d', $gid);
}

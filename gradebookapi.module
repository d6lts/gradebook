<?php
// $Id$

// hook_help
function gradebookapi_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('Provides a gradebook API.');
  }
}

function gradebookapi_get_vid() {
  $vid = variable_get('gradebookapi_nav_vocabulary', '');
  if (empty($vid)) {
    // Check to see if a forum vocabulary exists
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", 'gradebook'));
    if (!$vid) {
      $edit = array(
        'name' => 'Gradebook',
        'multiple' => 0,
        'required' => 1,
        'hierarchy' => 1,
        'relations' => 0,
        'module' => 'gradebook',
        'nodes' => array('assignment' => 1)
      );
      taxonomy_save_vocabulary($edit);
      $vid = $edit['vid'];
      
      $edit = array(
        'name' => 'default',
        'description' => '',
        'vid' => $vid,
        'weight' => 0
      );
      taxonomy_save_term($edit);
      variable_set('gradebookapi_default_tid', $edit['tid']);
    }
    variable_set('gradebookapi_nav_vocabulary', $vid);
  }

  return $vid;
}

function gradebookapi_default_gradebook_load() {
  // get vid to make sure vocab exists
  $vid = gradebookapi_get_vid();
  $gid = variable_get('gradebookapi_default_tid', -1);
  return gradebookapi_gradebook_load($gid);
}

function gradebookapi_gradebook_load($gid) {
  if (_gradebookapi_is_root_term($gid)) {
    return taxonomy_get_term($gid);
  }
  return FALSE;
}

function _gradebookapi_is_root_term($tid) {
  $parents = taxonomy_get_parents($tid);
  foreach ($parents as $parent) {
    return FALSE;
  }
  return TRUE;
}

function gradebookapi_select_nodes($gradebook, $tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC') {
  $vid = gradebookapi_get_vid();
  $tree = taxonomy_get_tree($vid, $gradebook->tid);
  $allowed_tids = array_map('_taxonomy_get_tid_from_term', $tree);
  $use_tids = array();

  if (!count($tids)) {
    // use all tids in gradebook
    $use_tids = $allowed_tids;
  }
  else {
    // make sure tids are only in gradebook
    foreach ($tids as $tid) {
      if (in_array($tid, $allowed_tids)) {
        $use_tids[] = $tid;
      }
    }
  }
  
  $tids[] = $gradebook->tid; // add in gradebook tid
  
  // taxonomy_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC')
  return taxonomy_select_nodes($use_tids, $operator, $depth, $pager, $order);
}

function gradebookapi_get_grade($uid, $nid) {
  // try to get grade data
  $result = db_query(
    'SELECT g.earned, g.timestamp '.
    'FROM {gradebookapi_grade} g '.
    'WHERE g.uid=%d AND g.nid=%d', $uid, $nid);
  $grade = db_fetch_object($result);
  
  // add 'possible' grade
  $result = db_query(
    'SELECT a.possible '.
    'FROM {gradebookapi_assignment} a '.
    'WHERE a.nid=%d', $nid);
  if ($assignment = db_fetch_object($result)) {
    $grade->possible = $assignment->possible;
  }
  
  // add uid/nid
  $grade->uid = $uid;
  $grade->nid = $nid;
  
  return $grade;
}

function gradebookapi_set_grade($grade) {
  $old = gradebookapi_get_grade($grade->uid, $grade->nid);
  $grade->timestamp = time();
  if ($old->timestamp) {
    db_query('UPDATE {gradebookapi_grade} SET earned=%d, timestamp=%d WHERE uid=%d AND nid=%d', $grade->earned, $grade->timestamp, $grade->uid, $grade->nid);
  }
  else {
    db_query("INSERT INTO {gradebookapi_grade} (uid, nid, earned, timestamp) VALUES (%d, %d, %d, %d)", $grade->uid, $grade->nid, $grade->earned, $grade->timestamp); 
  }
  
  $terms = taxonomy_node_get_terms_by_vocabulary($grade->nid, gradebookapi_get_vid());
  foreach ($terms as $term) {
    gradebookapi_calc_grades($grade->uid, $term->tid);
  }
}

function gradebookapi_rebuild_grades($tid) {
  $children = taxonomy_get_children($tid, gradebookapi_get_vid());
  if ($children) {
    foreach ($children as $child) {
      gradebookapi_rebuild_grades($child->tid);
    }
  }
  else {
    gradebookapi_calc_grades_all_users($tid);
  }
}

function gradebookapi_clear_term_grades($tid, $recursive=TRUE, $start=TRUE) {
  db_query("DELETE FROM {gradebookapi_cache} WHERE tid=%d", $tid);
  // do a recursive delete?
  if ($recursive) {
    $children = taxonomy_get_children($tid, _gradebook_get_vid());
    foreach ($children as $child) {
      gradebookapi_clear_term_grades($child->tid, $recursive, FALSE);
    }
  }
  // tell parents to recalc cache
  if ($start) {
    $parents = taxonomy_get_parents($tid);
    foreach ($parents as $parent) {
      gradebookapi_calc_grades_all_users($parent->tid);
    }
  }
}

function gradebookapi_calc_grades($uid, $tid, $recursive=TRUE) {
  $earned = 0;
  $possible = 0;
  
  //watchdog('gradebook', "_gradebook_calc_grades($uid, $tid, $recursive)");
  //print_r(debug_backtrace());
  
  // if UID is < 1, calc grades for ALL users
  if ($uid<=0) {
    return gradebookapi_calc_grades_all_users($tid);
  }
  
  // clear cache
  db_query("DELETE FROM {gradebookapi_cache} WHERE tid=%d AND uid=%d", $tid, $uid); 
  
  // get grades from child terms
  $children = taxonomy_get_children($tid, gradebookapi_get_vid());
  foreach ($children as $child) {
    $grade = gradebookapi_get_term_grade($uid, $child->tid);
    if ($grade) {
      $earned += $grade->earned;
      $possible += $grade->possible;
    }
  }
  
  // get grades from nodes at this term
  $result = taxonomy_select_nodes(array($tid), 'or', 0, FALSE);
  while ($node = db_fetch_object($result)) {
    $grade = gradebookapi_get_grade($uid, $node->nid);
    if ($grade) {
      $earned += $grade->earned;
      $possible += $grade->possible;
    }
  }
  
  // cache grade
  db_query("INSERT INTO {gradebookapi_cache} (uid, tid, earned, possible) VALUES (%d, %d, %d, %d)", $uid, $tid, $earned, $possible);
  
  if ($recursive) {
    // recalc parents
    $parents = taxonomy_get_parents($tid);
    foreach ($parents as $parent) {
      gradebookapi_calc_grades($uid, $parent->tid, $recursive);
    }
  }
}

function gradebookapi_calc_grades_all_users($tid, $recursive=TRUE) {
  // TODO: fix reference to _gradebook_student_roles()
  $str_rids = implode(',', array_keys(_gradebook_student_roles()));
  $result = db_query("SELECT u.uid, u.name FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE u.status != 0 AND r.rid IN (". $str_rids .") ORDER BY u.name ASC");
  while ($account = db_fetch_object($result)) {
    gradebookapi_calc_grades($account->uid, $tid, $recursive);
  }
}

function gradebookapi_get_term_grade($uid, $tid) {
  $result = db_query("SELECT earned, possible FROM {gradebookapi_cache} WHERE tid=%d AND uid=%d", $tid, $uid);
  $grade = db_fetch_object($result);
  return $grade;
}

// hook_nodeapi
function gradebookapi_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    // TODO: handle assignment deletions, etc
  }
}

// hook_taxonomy
function gradebookapi_taxonomy($op, $type, $obj = NULL) {
  if ($obj['vid'] == gradebookapi_get_vid()) {
    switch ($op) {
      case 'insert':
      case 'update':
        switch ($type) {
          case 'term':
            // update grade cache
            //if ($obj['parent_old'] && ($obj['parent_old'] != $obj['parent'])) {
              // update old parent, but exclude 'tid' as hierarchy is not updated yet
              //gradebookapi_calc_grades_all_users($obj['parent_old'], array('tid'=>array($obj['tid'])));
            //}
            //gradebookapi_calc_grades_all_users($obj['tid']);
            
            // at this point, the term has been saved, but the hierarchy table has not been updated
            // delete the term grades from cache and force cleaning up OLD tree branch
            //gradebookapi_clear_term_grades($obj['tid']);
            // update new parent, forcing inclusion of 'tid'
            //gradebookapi_calc_grades_all_users($obj['tid'], array('parents'=>arra($obj['parent'])), array('parents'=>array($obj['parent_old'])));
            
            // recalc old parent, excluding current 'tid'
            //if ($obj['parent_old']) {
            //  gradebookapi_calc_grades_all_users($obj['parent_old'], array('children'=>array($obj['tid'])));
            //}
            // recalc new parent, including current 'tid' and excluding old parent
            //gradebookapi_calc_grades_all_users($obj['parent'][0], array('parents'=>array($obj['parent_old'])), array('children'=>array($obj['tid'])));
            break;
        }
        break;
      case 'delete':
        switch ($type) {
          case 'term':
            // TODO: by the time we get here, the hierarchy has already been cleaned.
            //       how do we tell the parent to recalc?
            gradebookapi_clear_term_grades($obj['tid']);
            // TODO: delete nodes associated with this term and it's children
            break;
          case 'vocabulary':
            variable_del('gradebookapi_nav_vocabulary');
            variable_del('gradebookapi_default_tid');
            break;
        }
        break;
    }
  }
}

function gradebookapi_assignment_load($node) {
  $additions = db_fetch_object(db_query('SELECT possible, overage FROM {gradebookapi_assignment} WHERE nid = %d', $node->nid));
  return $additions;
} 

function gradebookapi_assignment_insert($node) {
  db_query("INSERT INTO {gradebookapi_assignment} (nid, possible, overage) VALUES (%d, %d, %d)", $node->nid, $node->possible, $node->overage);
  
  // we have to manually update terms as we can't control module order
  taxonomy_node_save($node->nid, $node->taxonomy);
  
  $terms = taxonomy_node_get_terms_by_vocabulary($node->nid, gradebookapi_get_vid());
  foreach ($terms as $term) {
    gradebookapi_calc_grades_all_users($term->tid);
  }
}

function gradebookapi_assignment_update($node) {
  db_query("UPDATE {gradebookapi_assignment} SET possible = '%s', overage = %d WHERE nid = %d", $node->possible, $node->overage, $node->nid);
  
  // we have to manually update terms as we can't control module order
  taxonomy_node_save($node->nid, $node->taxonomy);
  
  $terms = taxonomy_node_get_terms_by_vocabulary($node->nid, gradebookapi_get_vid());
  foreach ($terms as $term) {
    gradebookapi_calc_grades_all_users($term->tid);
  }
}

function gradebookapi_assignment_delete($node) {
  db_query('DELETE FROM {gradebookapi_assignment} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {gradebookapi_grade} WHERE nid = %d', $node->nid);

  $terms = taxonomy_node_get_terms_by_vocabulary($node->nid, gradebookapi_get_vid());
  foreach ($terms as $term) {
    gradebookapi_calc_grades_all_users($term->tid);
  }
}

function gradebookapi_assignment_form_elements($node) {
  $form = array();
  
  $form['possible'] = array(
    '#type' => 'textfield',
    '#title' => t('Possible'),
    '#default_value' => ($node->possible?$node->possible:'0'),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
  );
  
  $form['overage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Overage'),
    '#default_value' => ($node->overage?$node->overage:'0'),
  );
  
  return $form;
}

function gradebookapi_assignment_validate(&$node) {
  if (!is_numeric($node->possible) || ($node->possible < 0)) {
    form_set_error('possible', t('The possible value for the assignment must be a positive integer.')); 
  }
}

function gradebookapi_assignment_submit(&$node) {
  // TODO: anything to do here?
}

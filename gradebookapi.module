<?php
// $Id$
/**
 * @file
 * An API for a simple gradebook.
 */

/**
 * Implementation of hook_perm().
 */
function gradebookapi_perm() {
  return array('admin gradebookapi');
}

/**
 * Implementation of hook_theme().
 */
function gradebookapi_theme() {
  return array(
    'gradebookapi_assignment_possible'  => array('arguments' => array('possible'))
  );
}

/**
 * Implementation of hook_menu().
 */
function gradebookapi_menu() {
  $items = array();

    $items['admin/gradebook'] = array(
      'title' => 'Gradebook',
      'description'      => 'Administer the suite of Gradebook modules.',
      'position'         => 'left',
      'weight'           => -5,
      'page callback'    => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file'             => 'system.admin.inc',
      'file path'        => drupal_get_path('module', 'system'),
      );

    $items['admin/gradebook/gradebookapi'] = array(
      'title'            => 'Gradebook API',
      'description'      => 'Provides a gradebook API.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('gradebookapi_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file'             => 'gradebookapi.admin.inc',
      'type' => MENU_NORMAL_ITEM, // optional
    );
  return $items;
}

/**
 * Implementation of hook_help().
 */
function gradebookapi_help($path, $arg) {
  switch ($path) {
    case 'admin/gradebook/gradebookapi':
      $output = '<p>'. t('The gradebook API provides a framework for developing gradebook user interfaces.') .'</p>';
      $output .= '<p>'. t('Indicate which of the following content types can be used as gradebook assignments. Their create content (add) forms will be given additional fields so the teacher can select the appropriate gradebook and to assign a possible number of points for the assignment.') .'</p>';
      return $output;
    case 'admin/gradebook':
      $output = '<p>'. t('The Gradebook suite of modules provides the framework and user interface for gradebooks that can be used by students and teachers. You can use the links below to configure these modules') .'</p>';
      return $output;
  }
}

function gradebookapi_get_assignment_types() {
  $vid = gradebookapi_get_vid();
  $vocabulary = taxonomy_vocabulary_load($vid); // returns vocabulary object
  return $vocabulary->nodes;
}

function gradebookapi_get_vid() {
  $vid = variable_get('gradebookapi_nav_vocabulary', '');
  if (empty($vid)) {
    // Check to see if a forum vocabulary exists
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = '%s'", 'gradebook'));
    if (!$vid) {
      $edit = array(
        'name' => 'Gradebook',
        'description' => '',
        'help'        => '',
        'multiple' => 0,
        'required' => 1,
        'hierarchy' => 1,
        'relations' => 0,
        'module' => 'gradebook',
        'nodes' => array(),  // does this require an assignment type?
      );
      taxonomy_save_vocabulary($edit);
      $vid = $edit['vid'];
    }
    variable_set('gradebookapi_nav_vocabulary', $vid);
  }
  return $vid;
}

function gradebookapi_gradebook_load($tid) {
  if (_gradebookapi_is_root_term($tid)) {
    return taxonomy_get_term($tid);
  }
  else {
    return FALSE;
  }
}

function _gradebookapi_is_root_term($tid) {
  $parents = taxonomy_get_parents($tid);
  if (!empty($parents)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

// returns the gradebook for a child tid
function gradebookapi_get_tid_gradebook($tid) {
  $parents = taxonomy_get_parents_all($tid);
  return array_pop($parents);
}

function gradebookapi_select_nodes($gradebook, $tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC') {
  $vid = gradebookapi_get_vid();
  $tree = taxonomy_get_tree($vid, $gradebook->tid);
  $allowed_tids = array_map('_taxonomy_get_tid_from_term', $tree);
  $allowed_tids[] = $gradebook->tid;
  $use_tids = array();

  if (!count($tids)) {
    // use all tids in gradebook
    $use_tids = $allowed_tids;
  }
  else {
    // make sure tids are only in gradebook
    foreach ($tids as $tid) {
      if (in_array($tid, $allowed_tids)) {
        $use_tids[] = $tid;
      }
    }
  }
//$tids[] = $gradebook->tid; // add in gradebook tid

  // taxonomy_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC')
  return _gradebookapi_select_nodes($use_tids, $operator, $depth, $pager, $order);
}

function _gradebookapi_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC') {
  if (count($tids) > 0 ) {

    // For each term ID, generate an array of descendant term IDs to the right depth.
    $descendant_tids = array();
    if ($depth === 'all') {
      $depth = NULL;
    }
    foreach ($tids as $index => $tid) {

      if (is_numeric($tid)) {  // guard against null $tids...but what is the source of these?
        $term = taxonomy_get_term($tid);
        $tree = taxonomy_get_tree($term->vid, $tid, -1, $depth);
        $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
      }
      else {
        unset($tids[$index]); // remove the offending $tid
      }
    }

    if ($operator == 'or') {
      $str_tids = implode(',', call_user_func_array('array_merge', $descendant_tids));
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid INNER JOIN {gradebookapi_assignment} a ON n.nid = a.nid WHERE tn.tid IN ('. $str_tids .') AND n.status = 1 ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid INNER JOIN {gradebookapi_assignment} a ON n.nid = a.nid WHERE tn.tid IN ('. $str_tids .') AND n.status = 1';
    }
    else {
      $joins = 'INNER JOIN {gradebookapi_assignment} a ON n.nid = a.nid';
      $wheres = '';
      foreach ($descendant_tids as $index => $tids) {
        $joins .= ' INNER JOIN {term_node} tn'. $index .' ON n.nid = tn'. $index .'.nid INNER JOIN {term_data} td ON tn'. $index .'.tid = td.tid';
        $wheres .= ' AND tn'. $index .'.tid IN ('. implode(',', $tids) .')';
      }
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n '. $joins .' WHERE n.status = 1 '. $wheres .' ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n '. $joins .' WHERE n.status = 1 '. $wheres;
    }
    $sql = db_rewrite_sql($sql);
    $sql_count = db_rewrite_sql($sql_count);
    if ($pager) {
      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count);
    }
    else {
      $result = db_query_range($sql, 0, variable_get('feed_default_items', 10));
    }
  }

  return $result;
print 'in _select_nodes';
print_r($result);
}

/**
 * gradebookapi_get_grade
 *
 *  Retrieves the grade for user $uid for assignment node $nid.  If more than one grade exists
 *  only the last query is returned. If a grade has not been entered then a partial grade object
 *  with the possible value is returned.
 */


function gradebookapi_get_grade($uid, $nid) {
  $grades = gradebookapi_get_grades(array('uid' => $uid, 'nid' => $nid));
  if (count($grades)) {
    return array_pop($grades);
  }
  // if no grade exists, return grade with possible value
  else {
    $result = db_query(
      'SELECT a.possible '.
      'FROM {gradebookapi_assignment} a '.
      'WHERE a.nid=%d', $nid);
    $grade = db_fetch_object($result);
    $grade->uid = $uid;
    $grade->nid = $nid;

    //gradebookapi_invoke_gradebookapi('load', 'grade', $grade);
    return $grade;
  }

}

function gradebookapi_get_grades($param = array()) {
  $grades = array();

  foreach ($param as $key => $value) {
    $cond[] = 'g.'. db_escape_string($key) ." = '%s'";
    $arguments[] = $value;
  }
  $cond = implode(' AND ', $cond);

  $result = db_query('SELECT g.uid, g.nid, g.earned, g.exempt, a.possible, g.timestamp, g.note FROM {gradebookapi_grade} g INNER JOIN {gradebookapi_assignment} a ON g.nid = a.nid WHERE '. $cond, $arguments);
  while ($grade = db_fetch_object($result)) {
    //gradebookapi_invoke_gradebookapi('load', 'grade', $grade);
    $grades[] = $grade;
  }

  return $grades;
}
/**
 *  gradebookapi_get_term_grade retrieves grade information by category
 *  and user from the gradebookapi_cache table
 *
 *  @param $uid
 *    The student user id
 *  @param $tid
 *    The grade category term id
 *  @return $grade
 *    A (partial) grade object
 */
function gradebookapi_get_term_grade($uid, $tid) {
  $result = db_query("SELECT uid, tid, earned, possible FROM {gradebookapi_cache} WHERE tid=%d AND uid=%d", $tid, $uid);
  $grade = db_fetch_object($result);

  //gradebookapi_invoke_gradebookapi('load', 'grade', $grade);

  return $grade;
}

function gradebookapi_set_grade($grade) {
  $old = gradebookapi_get_grade($grade->uid, $grade->nid);
  $grade->timestamp = time();
  if ($old->timestamp) {
    db_query("UPDATE {gradebookapi_grade} SET earned=%d, exempt=%d, timestamp=%d, note='%s' WHERE uid=%d AND nid=%d", $grade->earned, $grade->exempt, $grade->timestamp, $grade->note, $grade->uid, $grade->nid);
    //gradebookapi_invoke_gradebookapi('update', 'grade', $grade);
  }
  else {
    db_query("INSERT INTO {gradebookapi_grade} (uid, nid, earned, exempt, timestamp, note) VALUES (%d, %d, %d, %d, %d, '%s')", $grade->uid, $grade->nid, $grade->earned, $grade->exempt, $grade->timestamp, $grade->note);
    //gradebookapi_invoke_gradebookapi('insert', 'grade', $grade);
  }

  $terms = taxonomy_node_get_terms_by_vocabulary($grade->nid, gradebookapi_get_vid());
  foreach ($terms as $term) {
    gradebookapi_calc_grades($grade->uid, $term->tid);
  }
}

function gradebookapi_rebuild_grades($tid) {
  $children = taxonomy_get_children($tid, gradebookapi_get_vid());
  if ($children) {
    foreach ($children as $child) {
      gradebookapi_rebuild_grades($child->tid);
    }
  }
  else {
    gradebookapi_calc_term_grades($tid);
  }
}

function gradebookapi_clear_term_grades($tid, $recursive=TRUE, $start=TRUE) {
  db_query("DELETE FROM {gradebookapi_cache} WHERE tid=%d", $tid);
  // do a recursive delete?
  if ($recursive) {
    $children = taxonomy_get_children($tid, gradebookapi_get_vid());
    foreach ($children as $child) {
      gradebookapi_clear_term_grades($child->tid, $recursive, FALSE);
    }
  }
  // tell parents to recalc cache
  if ($start) {
    $parents = taxonomy_get_parents($tid);
    foreach ($parents as $parent) {
      gradebookapi_calc_term_grades($parent->tid);
    }
  }
}

function gradebookapi_calc_grades($uid, $tid, $recursive=TRUE) {
  $earned = 0;
  $possible = 0;

  $gradebook = gradebookapi_get_tid_gradebook($tid);
  //watchdog('gradebook', "_gradebook_calc_grades($uid, $tid, $recursive)");
  //print_r(debug_backtrace());

  // if UID is < 1, calc grades for ALL users
  if ($uid<=0) {
    return gradebookapi_calc_term_grades($tid);
  }
  else {
    // clear cache
    db_query("DELETE FROM {gradebookapi_cache} WHERE tid=%d AND uid=%d", $tid, $uid);

    // get grades from child terms
    $children = taxonomy_get_children($tid, gradebookapi_get_vid());
    foreach ($children as $child) {
      $grade = gradebookapi_get_term_grade($uid, $child->tid);
      if ($grade) {
        $earned += $grade->earned;
        $possible += $grade->possible;
//        print '<p>* uid='.$uid .' tid='. $tid .' child = '.$child->tid.' earned=' .$earned. ' and possible = '. $possible . '</p>';
      }
//        print '<p>* Done *</p>';
    }

    // get grades from nodes at this term
    $result = gradebookapi_select_nodes($gradebook, array($tid), 'or', 0, FALSE);
    while ($assignment = db_fetch_object($result)) {
      $grade = gradebookapi_get_grade($uid, $assignment->nid);
      //print_r($grade);
      if ($grade && isset($grade->exempt) && !$grade->exempt) {
        $earned += $grade->earned;
        $possible += $grade->possible;
//       print '<p>** uid='.$uid .' tid='. $tid .' nid = '. $assignment->nid .' earned=' .$earned. ' and possible = '. $possible . '</p>';
      }
//        print '<p>** Done **</p>';
    }

    // cache grade
    db_query("INSERT INTO {gradebookapi_cache} (uid, tid, earned, possible) VALUES (%d, %d, %d, %d)", $uid, $tid, $earned, $possible);

    if ($recursive) {
      // recalc parents
      $parents = taxonomy_get_parents($tid);
      foreach ($parents as $parent) {
        gradebookapi_calc_grades($uid, $parent->tid, $recursive);
      }
    }
  }
}

/**
 *  Calculate all student grades for a gradebook, or gradebook category
 *
 *  @param $tid
 *    the taxonomy term id to use to lookup grades on associated assignment nodes
 *  @param $recursive
 *    Not sure what this does right now, but defaults to TRUE
 *  @return
 *    NULL - no return value
 */
function gradebookapi_calc_term_grades($tid, $recursive=TRUE) {
  $gradebook = gradebookapi_get_tid_gradebook($tid);
  $students = gradebookapi_get_students($gradebook);
  if ( $str_uids = implode(',', $students) ) {
    $result = db_query("SELECT u.uid FROM {users} u WHERE u.status <> 0 AND u.uid IN (". $str_uids .") ORDER BY u.name ASC");
  }
  else {
    $result = FALSE;
  }
  if ($result) {
    while ($account = db_fetch_object($result)) {
      gradebookapi_calc_grades($account->uid, $tid, $recursive);
    }
  }
}

function gradebookapi_calc_assignment_grades($node, $terms = array()) {

  if (empty($terms)) {
    $terms = taxonomy_node_get_terms_by_vocabulary($node, gradebookapi_get_vid());
  }

  foreach ($terms as $term) {
    gradebookapi_calc_term_grades($term->tid);
  }
}

/**
 * Implementation of hook_taxonomy().
 *
 * @return NONE
 */
function gradebookapi_taxonomy($op, $type, $obj = NULL) {
  if ($obj['vid'] == gradebookapi_get_vid()) {
    switch ($op) {
      case 'insert':
      case 'update':
        switch ($type) {
          case 'term':
            // TODO: can this code be removed?
            // update grade cache
            //if ($obj['parent_old'] && ($obj['parent_old'] != $obj['parent'])) {
              // update old parent, but exclude 'tid' as hierarchy is not updated yet
              //gradebookapi_calc_term_grades($obj['parent_old'], array('tid'=>array($obj['tid'])));
            //}
            //gradebookapi_calc_term_grades($obj['tid']);

            // at this point, the term has been saved, but the hierarchy table has not been updated
            // delete the term grades from cache and force cleaning up OLD tree branch
            //gradebookapi_clear_term_grades($obj['tid']);
            // update new parent, forcing inclusion of 'tid'
            //gradebookapi_calc_term_grades($obj['tid'], array('parents'=>array($obj['parent'])), array('parents'=>array($obj['parent_old'])));

            // recalc old parent, excluding current 'tid'
            //if ($obj['parent_old']) {
            //  gradebookapi_calc_term_grades($obj['parent_old'], array('children'=>array($obj['tid'])));
            //}
            // recalc new parent, including current 'tid' and excluding old parent
            //gradebookapi_calc_term_grades($obj['parent'][0], array('parents'=>array($obj['parent_old'])), array('children'=>array($obj['tid'])));
            break;
        }
        break;
      case 'delete':
        switch ($type) {
          case 'term':
            // TODO: by the time we get here, the hierarchy has already been cleaned.
            //       how do we tell the parent to recalc?
            gradebookapi_clear_term_grades($obj['tid']);
            // TODO: delete nodes associated with this term and it's children
            break;
          case 'vocabulary':
            variable_del('gradebookapi_nav_vocabulary');
            break;
        }
        break;
    }
  }
}

function gradebookapi_assignment_terms($node) {
  $terms = array();
  $vid = gradebookapi_get_vid();
  $allterms = taxonomy_node_get_terms($node);

  foreach ($allterms as $term) {
    // make sure we only look in the gradebook vocabulary
    if ($term->vid == $vid) {
      $terms[] = $term;
    }
  }

  return $terms;
}

function gradebookapi_assignment_load($node) {
  $additions = db_fetch_array(db_query('SELECT possible FROM {gradebookapi_assignment} WHERE nid = %d', $node->nid));
  return $additions;
}

function gradebookapi_assignment_insert($node) {
  db_query("INSERT INTO {gradebookapi_assignment} (nid, possible) VALUES (%d, %d)", $node->nid, $node->possible);

  // we have to manually update terms as we can't control module order


  gradebookapi_calc_assignment_grades($node);
}

function gradebookapi_assignment_update($node) {
  db_query("UPDATE {gradebookapi_assignment} SET possible = '%s' WHERE nid = %d", $node->possible, $node->nid);

  // we have to manually update terms as we can't control module order

  taxonomy_node_save($node->nid, $node->taxonomy);

  gradebookapi_calc_assignment_grades($node);
}

function gradebookapi_assignment_delete($node) {
  db_query('DELETE FROM {gradebookapi_assignment} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {gradebookapi_grade} WHERE nid = %d', $node->nid);

// If taxonomy_node_delete has already been called, then we loose the info in
// {term_node} needed to recalculate the grade instead, gather the gradebook api
// terms associated with an assignment and send them into gradebookapi_calc_grades
// to bypass the call to taxonomy_node_get_terms_by_vocabulary() (which will fail).
  $allterms = $node->taxonomy;
  $vid = gradebookapi_get_vid();
  $terms= array();
  foreach ($allterms as $term) {
    if ($term->vid == $vid) {
      $terms[$term->tid]=$term;
    }
  }
  gradebookapi_calc_assignment_grades($node, $terms);
}

function gradebookapi_assignment_view(&$node, $teaser = FALSE, $page = FALSE) {

  $node = node_prepare($node, $teaser);
  $node->content['possible'] = array(
    '#value' => theme('gradebookapi_assignment_possible', $node->possible),
    '#weight' => -100,
  );

  return $node;
}

function theme_gradebookapi_assignment_possible($possible) {
  // TODO: theme the possible field
  $header = array();
  $row = array();
  $row[]=  array(t('<strong>Possible</strong>'), $possible);

  return theme('table', $header, $row);

}

function gradebookapi_assignment_form_elements($node) {
  $form = array();

  $form['gradebookapi'] = array(
    '#type' => 'fieldset',
    '#title' => t('Assignment Settings'),
    '#tree' => FALSE,
    //'#validate' => array('gradebookapi_assignment_validate' => array()),
  );
  $form['gradebookapi']['possible'] = array(
    '#type' => 'textfield',
    '#title' => t('Possible'),
    '#default_value' => ($node->possible ? $node->possible:'0'),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $oldtax = $node->taxonomy;
  if (is_array($oldtax)) {  // an array of terms
    $vid = gradebookapi_get_vid();
    foreach ($oldtax as $term) {
      if ($term->vid == $vid) {  // find the gradebook term
        $oldtid = $term->tid;
      }
    }
  }
  if (isset($oldtid)) {
    $form['gradebookapi']['oldtid'] = array('#type' => 'hidden', '#value' => $oldtid);
  }

  return $form;
}

function gradebookapi_assignment_validate($node) {
  // safe int check
  if (is_numeric($node->possible) ? intval($node->possible) != $node->possible : TRUE) {
    form_set_error('possible', t('The possible value for the assignment must be an integer.'));
  }

  // if the term has changed, clear the term grade for the previous term
  $tax = $node->taxonomy;
  $index = gradebookapi_get_vid();

  if (isset($node->oldtid) && isset($tax[$index]) && $tax[$index] != $node->oldtid ) {
    gradebookapi_clear_term_grades($node->oldtid);
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * @return NONE
 */

function gradebookapi_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];
    $types = gradebookapi_get_assignment_types();

    // are we an assignment type?
    if (!empty($types)) {
      if (in_array($node->type, $types)) {
        $form = array_merge($form, gradebookapi_assignment_form_elements($node));
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * @return NONE
 */

function gradebookapi_nodeapi(&$node, $op, $teaser, $page) {
  if (in_array($node->type, (array)gradebookapi_get_assignment_types())) {
    switch ($op) {
      case 'load':
        return gradebookapi_assignment_load($node);
      case 'insert':
        gradebookapi_assignment_insert($node);
        break;
      case 'update':
        gradebookapi_assignment_update($node);
        break;
      case 'delete':
        gradebookapi_assignment_delete($node);
        break;
      case 'view':
        gradebookapi_assignment_view($node);
        break;
      case 'validate':
        gradebookapi_assignment_validate($node);
        break;
    }
  }
}

/**
 *
 * module_invoke_all('gradebookapi', $op, $type, &$obj);
 * hook_gradebookapi($op, $type, &$obj);
 */
// custom module_invoke_all due to obj reference
// TODO: This needs to be reviewed and reimplemented if needed
/*
function gradebookapi_invoke_gradebookapi($op, $type, &$obj) {
  $return = array();
  foreach (module_implements('gradebookapi') as $name) {
    $function = $name .'_gradebookapi';
    $result = $function($op, $type, $obj);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}
 */

function gradebookapi_is_student_or_teacher($gradebook, $account = NULL) {

  if (gradebookapi_is_student($gradebook, $account)) {
    return TRUE;
  }
  elseif (gradebookapi_is_teacher($gradebook, $account)) {
    return TRUE;
  }

  return FALSE;

}

function gradebookapi_is_student($gradebook, $account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = user_load(array('uid' => $user->uid));
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  $students = gradebookapi_get_students($gradebook);
  if (in_array($account->uid, $students)) {
    return TRUE;
  }

  return FALSE;
}

function gradebookapi_is_teacher($gradebook, $account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = user_load(array('uid' => $user->uid));
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  $teachers = gradebookapi_get_teachers($gradebook);
  if (in_array($account->uid, $teachers)) {
    return TRUE;
  }

  return FALSE;
}

function gradebookapi_get_students($gradebook) {
  return module_invoke_all('gradebookapi_students', $gradebook);
}

function gradebookapi_get_teachers($gradebook) {
  return module_invoke_all('gradebookapi_teachers', $gradebook);
}

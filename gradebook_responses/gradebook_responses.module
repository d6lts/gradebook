<?php
// $Id$
/**
 * @file
 * Provides student responses to gradebook assignments.
 */

/**
 * Implementation of hook_theme().
 */
function gradebook_responses_theme() {
  return array(
    'gradebook_responses_assignment' => array('arguments' => array('aid')),
    'gradebook_responses_status' => array('arguments' => array('rstatus')),
  );
}

/**
 * Implementation of hook_user().
 */
function gradebook_responses_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete' ) {
    // Do something with gradebook responses. Parallel what is done in gradebookapi.module.
  }
}

/** 
 * Implementation of hook_link().
 */
function gradebook_responses_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  $aid = $node->nid;
  $assignment_types = gradebookapi_get_assignment_types();
  if (isset($assignment_types[$node->type])) {
    $terms = gradebookapi_assignment_terms($node);
    $gids = array();
    foreach ($terms as $term) { 
      $gradebook = gradebookapi_get_tid_gradebook($term->tid);
      $gids[] = $gradebook->tid;
    }
    if (!empty($gids)) {
      $response_types = gradebook_responses_allowed_response_types($aid);
      // Allow assignment to be in multiple gradebooks.
      foreach (array_unique($gids) as $gid)  {   
        $gradebook = gradebookapi_get_tid_gradebook($gid);
        $student = gradebookapi_is_student($gradebook);
        // Only students are allowed to create a response.
        if ($student) {  
          foreach ($response_types as $type) {
            $type_name = db_result(db_query("SELECT name FROM {node_type} where type = '%s'", $type));
            // Need this for content types with underscores.
            $type_url_str = str_replace('_', '-', $type);
            $links['gradebook_responses_'. $type] = array(
              'title' => t("Create a !name response.", array('!name' => $type_name)),
              'href' => 'node/add/'. $type_url_str,
              'query' => 'aid='. $aid,
              'attributes' => array('title' => t("Create a !name response to this assignment.", array('!name' => $type_name))),
            );
          }
        }
      }
    }
  }
  return $links;
}

/**
 * Retrieves the response node types selected on the gradebookapi admin form.
 *
 * @return
 *   An array of content types.
 */
function gradebook_responses_get_response_types() {
  $types = array_filter((array) variable_get('gradebook_responses_types', array()));
  return $types;
}

/**
 * Retrieves an array of allowed response types for an assignment.
 *
 * @param $aid
 *   The node id for the assignment.
 *
 * @return
 *   An array of content types.
 */
function gradebook_responses_allowed_response_types($aid) {
  $types = array();
  $result = db_result(db_query('SELECT response_types FROM {gradebookapi_assignment} WHERE nid = %d', $aid));
  if (isset($result)) {
    $types = explode(',', $result);
  }
  return $types;
}

/**
 * Retrieves student response node information from gradebook_responses table.
 *
 * @param $param
 *   An associative array where the keys can be 'uid', 'nid', or 'aid'.
 *   Example: To return all responses for assignment with $node->nid, use array('aid' => $node->nid).
 *
 * @return
 *   An array of the response values.
 */
function gradebook_responses_get_responses($param = array()) {
  foreach ($param as $key => $value) {
    $cond[] = db_escape_string($key) .' = %d';
    $arguments[] = $value;
  }
  $cond = implode(' AND ', $cond);

  $result = db_query('SELECT * FROM {gradebook_responses} WHERE '. $cond, $arguments);
  $responses = array();
  while ($response = db_fetch_array($result)) {
   $responses[] = $response;
  }
  return $responses;
}

/**
 * Determines if a response exists for an assignment and user.
 *
 * @param $nid
 *   The assignment node.
 * @param $uid
 *   The user id.
 *
 * @return
 *   TRUE if a response exists, FALSE otherwise.
 */
function gradebook_responses_grade_has_response($nid, $uid) {
  $count = db_result(db_query('SELECT COUNT(nid) FROM {gradebook_responses} WHERE uid=%d and aid=%d', $uid, $nid));
  return ($count > 0);
}

/**
 * Retrieves additional form elements from the gradebook_responses table.
 *
 * These elements are added to the response create node form.
 *
 * @param $node
 *   The response node.
 * @return
 *   An array of form default values.
 *
 * @see gradebook_responses_nodeapi().
 */
function _gradebook_responses_load($node) {
  $additions = gradebook_responses_get_responses(array('nid' => $node->nid));
  return array_pop($additions);
}

/**
 * Inserts additional assignment fields into the gradebook_responses table.
 *
 * @param $node
 *   The assignment node.
 *
 * @return NONE
 *
 * @see gradebook_responses_nodeapi().
 */
function _gradebook_responses_insert($node) {
  if (is_numeric($node->aid)) {
    db_query("INSERT INTO {gradebook_responses} (nid, aid, uid, rstatus) VALUES (%d, %d, %d, %d)", $node->nid, $node->aid, $node->uid, $node->rstatus);
  }
}

/**
 * Updates response fields in the gradebook_responses table.
 *
 * @param $node
 *   The assignment node.
 *
 * @return NONE
 *
 * @see gradebook_responses_nodeapi().
 */
function _gradebook_responses_update(&$node) {
  if (is_numeric($node->aid)) {
    if (db_result(db_query('SELECT * FROM {gradebook_responses} a WHERE a.nid = %d AND a.uid = %d', $node->nid, $node->uid))) {
      db_query("UPDATE {gradebook_responses} SET aid = %d, rstatus = %d WHERE nid = %d AND uid = %d", $node->aid, $node->rstatus, $node->nid, $node->uid);
    }
    else {
      // The assignment doesn't exist in gradebook_responses table for this user, so insert it.
      _gradebook_responses_insert($node);
    }
  }
}

/**
 * Deletes response field values from the gradebook_responses table.
 * 
 * The grades are then recalculated.
 *
 * @param $node
 *   The assignment node.
 *
 * @return NONE
 *
 * @see gradebook_responses_nodeapi().
 */
function _gradebook_responses_delete($node) {
  // Delete records for all students for this assignment node.
  db_query('DELETE FROM {gradebook_responses} WHERE nid = %d AND uid = %d', $node->nid, $node->uid);
}

/**
 * Adds assignment response values to $node->content before rendering.
 *
 * @param $node
 *   The assignment node.
 * @param $teaser
 *   The teaser parameter passed from node_view().
 * @param $page
 *   The page parameter passed from node_view().
 *
 * @return NONE
 *
 * @see gradebook_responses_nodeapi().
 */
function _gradebook_responses_view(&$node, $teaser = FALSE, $page = FALSE) {
  // Do not modify $node->content unless an assignment id has been assigned.
  if (isset($node->aid) && is_numeric($node->aid)) {
    $node->content['aid'] = array(
      '#value' => theme('gradebook_responses_assignment', $node->aid),
      '#weight' => -100,
    );
    $node->content['rstatus'] = array(
      '#value' => theme('gradebook_responses_status', $node->rstatus),
      '#weight' => -100,
    );
  }
}

/**
 * Returns HTML documenting assignment details.
 *
 * @param $possible
 *   The possible number of points for the assignment.
 *
 * @return
 *   The HTML string ready to display.
 *
 * @ingroup themeable
 */
function theme_gradebook_responses_assignment($aid) {
  $node = node_load($aid);
  $output = '<div class="gradebook-response-assignment">'. t('Response to Assignment') .': ';
  $output .= '<span class="gradebook-response-assignment-title">'. $node->title .'</span>';
  $output .= '</div>';
  return $output;
}

/**
 * Returns HTML indicating the assignment status.
 *
 * @param $rstatus
 *   The current status of the assignment response.
 *
 * @return
 *   The HTML string ready to display.
 *
 * @ingroup themeable
 */
function theme_gradebook_responses_status($rstatus) {
  $status_string =_gradebook_responses_status_string();
  $output = '';
  if (isset($status_string[$rstatus])) {
    $output = '<div class="gradebook-response-status">'. t('Status of Response') .': ';
    $output .= '<span class="gradebook-response-status-string">'. $status_string[$rstatus] .'</span>';
    $output .= '</div>';
  }
  return $output;
}

function _gradebook_responses_status_string() {
  static $status_string;
  if (empty($status_string)) {
    $status_string = array(0 => t('- Not set -'), 1 => t('In progress'), 2 => t('Completed'), 3 => t('Graded'));
  }
  return $status_string;
}

/**
 * Prepares extra response fields for the node response forms.
 *
 * @param $node
 *   The response node.
 *
 * @return $form
 *   Additional form array elements for the assignment create form.
 *
 * @ingroup themeable
 */
function gradebook_responses_form_elements($node) {
  $form = array();
  $status_options = _gradebook_responses_status_string();
  $locked = (isset($node->rstatus) && $node->rstatus == array_pop(array_keys($status_options)));
    global $user;
    $account = user_load(array('uid' => $node->uid));
    // Prepares a list of all possible assignments for this user.
    $options = array('none' => t('- None -'));  
    $vid = gradebookapi_get_vid();
    $result = db_query('SELECT DISTINCT t.tid FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE h.parent = 0 AND t.vid = %d', $vid);
    while ($tid = db_result($result)) {
      $gradebook = gradebookapi_gradebook_load($tid);
      if (gradebookapi_is_student($gradebook, $account)) {
        // Gets the assignments.
        $res = gradebookapi_select_nodes($gradebook, array(), 'or', 0, FALSE);
        $assignments = array();
        if ($res) {
          while ($assignment = db_fetch_object($res)) {
	    $allowed = gradebook_responses_allowed_response_types($assignment->nid);  
            if (in_array($node->type, $allowed)) {
              $assignment = node_load($assignment->nid);
              $earned = db_result(db_query('SELECT earned FROM {gradebookapi_grade} WHERE uid=%d and nid=%d', $account->uid, $assignment->nid));
              if (is_null($earned) || $earned == '' || $locked) {
                // The assignment has not been graded, so add it to the options array.
                $options[$assignment->nid] = $assignment->title;
              }
            }
          }
        }
      }
    }
  if (!$locked) {
    array_pop($status_options);
  }
  $form['gradebook_responses'] = array(
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
    '#title'       => t('Assignment Response Settings'),
    '#tree'        => FALSE,
    '#weight'      => 0,
  );

  if (isset($_GET['aid'])) {
    $form['gradebook_responses']['aid'] = array('#type' => 'value', '#value' => $_GET['aid']);
  }
  else {
    $form['gradebook_responses']['aid'] = array(
      '#type'          => 'select',
      '#title'         => t('This is a response to assignment'),
      '#default_value' => isset($node->aid) ? $node->aid : NULL,
      '#options'       => $options,
      '#required'      => TRUE,
      '#disabled'      => $locked,
    );
  }

  $form['gradebook_responses']['rstatus'] = array(
    '#type'          => 'select',
    '#title'         => t('Response Status'),
    '#default_value' => isset($node->rstatus) ? $node->rstatus : NULL,  
    '#options'       => $status_options,
    '#required'      => TRUE,
    '#disabled'      => $locked,
  );
  return $form;
}

/**
 * Allows teacher to specify the response type for this assignment.
 *
 * @param $node
 *   The assignment node.
 *
 * @return $form
 *   Additional form array elements for the assignment create form.
 *
 * @see gradebook_responses_form_alter().
 */
function gradebook_responses_assignment_form_elements($node) {
  $form = array();
  $types = gradebook_responses_get_response_types();
  $options = array();
  foreach ($types as $type) {
    $options[$type] = $type;
  }

  // Prepares the default values for the select form element.
  $default = array();
  if (isset($node->allowed_response_types)) {
    foreach ($node->allowed_response_types as $type) {
      $default[$type] = $type;
    }
  }

  $form['allowed_response_types'] = array(
    '#type'          => 'select',
    '#title'         => t('Allowed response type'),
    '#default_value' => $default,
    '#options'       => $options,
    '#multiple'      => TRUE,
    '#required'      => FALSE,
    '#description'   => t('Select one or more content types that students can create to respond to the assignment.'),
    '#weight'        => 10,
  );

  return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function gradebook_responses_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'gradebookapi_admin_settings') {
    $form['gradebook_responses_types'] = array(
      '#type'          => 'checkboxes',
      '#title'         => t('Student Response Types'),
      '#multiple'      => TRUE,
      '#default_value' => (array) variable_get('gradebook_responses_types', array()),
      '#options'       => array_map('check_plain', node_get_types('names')),
      '#description'   => t('A list of node types you want to treat as student responses.'),
      '#weight'        => -9,
    );
  }
  if (isset($form['type']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];
    $types = gradebook_responses_get_response_types();
    if (in_array($node->type, $types)) {
      $form += gradebook_responses_form_elements($node);
    }
    $types = gradebookapi_get_assignment_types();
    if (!empty($types)) {
      if (in_array($node->type, $types)) {
        $form['gradebookapi'] += gradebook_responses_assignment_form_elements($node);
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function gradebook_responses_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  $types = (array) gradebook_responses_get_response_types();
  if (!empty($types) && in_array($node->type, $types)) {
    switch ($op) {
      case 'load':
        return _gradebook_responses_load($node);
      case 'insert':
        _gradebook_responses_insert($node);
        break;
      case 'update':
        _gradebook_responses_update($node);
        break;
      case 'delete':
        _gradebook_responses_delete($node);
        break;
      case 'view':
        _gradebook_responses_view($node, $teaser, $page);
        break;
    }
  }
  else {
    $types = (array) gradebookapi_get_assignment_types();
    if (in_array($node->type, (array)gradebookapi_get_assignment_types())) {
      switch ($op) {
        case 'load':
          // Retrieves an array of allowed response types for this node.
          $allowed = gradebook_responses_allowed_response_types($node->nid);
          $additions = array('allowed_response_types' => $allowed);
          return $additions;
        case 'insert':
        case 'update':
          // This should always be called after gradebookapi_nodeapi.
          // Stores allowed response types in the database as an imploded string.
          $allowed = implode(',', $node->allowed_response_types);
          if ($allowed != '') {
            db_query("UPDATE {gradebookapi_assignment} SET response_types = '%s' WHERE nid = %d", $allowed, $node->nid);
          }
          else {
            db_query("UPDATE {gradebookapi_assignment} SET response_types = NULL WHERE nid = %d", $node->nid);
          }
          break;
      }
    }
  }
}

/**
 * Prepares a list of assignment response links for the gradebook grade summary.
 *
 * @param $nid
 *   The assignment node id.
 * @param $uid
 *   The user id.
 *
 * @return
 *   An associative array with keys 'title' and 'links', each holding an
 *   array of response titles and links.
 */
function gradebook_responses_assignment_response($nid, $uid) {
  $responses = gradebook_responses_get_responses(array('aid' => $nid, 'uid' => $uid));
  $status_string = _gradebook_responses_status_string();
  $rlinks = array();
  $rtitle = '';
  if ($n = count($responses) > 0) {
    $rtitle= format_plural($n, '<br />Response:<br />', '<br />@count Responses:<br />', array('@count' => $n));
    $i = 0;
    foreach ($responses as $response) {
      $i++;
      $rstatus = $response['rstatus'];
      $rstatustext = $status_string[$rstatus];
      $rlinks[] = l($i .' ('. $rstatustext .')', 'node/'. $response['nid']);
    }
  }
  return array('title' => $rtitle, 'links' => $rlinks);
}

/**
 * Updates the response status when a grade is saved.
 *
 * @param $grade
 *   The grade object that is being saved.
 *
 * @return NONE
 */
function gradebook_responses_update_responses($grade) {
  $keys = array_keys($status_string = _gradebook_responses_status_string());
  $rstatus = 0;
  $result = db_query("SELECT COUNT(nid) FROM {gradebook_responses} WHERE uid = %d AND aid = %d", $grade->uid, $grade->nid);
  if (count($result) > 0 ) {
    $rstatus = array_pop($keys);
    if (is_numeric($grade->earned)) {
      // A reponse exists and a grade has been assigned.
      db_query("UPDATE {gradebook_responses} SET rstatus = %d WHERE uid = %d AND aid = %d", $rstatus, $grade->uid, $grade->nid);
      drupal_set_message(t('Changed response status to @status for this assignment.', array('@status' => $status_string[$rstatus])));
    }
    else {
      // Unlock any locked responses that have null earned grade.
      db_query("UPDATE {gradebook_responses} SET rstatus = %d WHERE uid = %d AND aid = %d AND rstatus = %d", 0, $grade->uid, $grade->nid, $rstatus);
    }
  }
}

/**
 * Implementation of hook_gradebook_grade_class().
 *
 * Return a css class name to style the gradebook_grade_page when an
 * assignment response has been submitted.
 *
 * @param $nid
 *   The assignment node id.
 * @param $uid
 *   The user id.
 *
 * @return
 *   A css class name
 */
function gradebook_responses_gradebook_grade_class($nid, $uid) {
  return gradebook_responses_grade_has_response($nid, $uid) ? 'response' : '';
}

/**
 * Implementation of hook_gradebookapi_grade().
 */
function gradebook_responses_gradebookapi_grade($action, $grade) {
  switch($action) {
    case 'set':
      gradebook_responses_update_responses($grade);
      break;
    case 'get':
      break;
  }
}

/**
 * Implementation of hook_gradebook_theme_add_content().
 */
function gradebook_responses_gradebook_theme_add_content($position, &$form, $id, $teacher) {
  switch ($position) {
    case 'title':
      $response = gradebook_responses_assignment_response($form['grade'][$id]['nid']['#value'], $form['grade'][$id]['uid']['#value']);
      $response_output = empty($response) ? '' : $response['title'] . implode(',<br />', $response['links']);
      return $response_output;
  }
}
